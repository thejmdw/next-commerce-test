{"ast":null,"code":"import _regeneratorRuntime from \"/Users/thejmdw/workspace/websites/next-commerce-test/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/thejmdw/workspace/websites/next-commerce-test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { FetcherError } from '@commerce/utils/errors';\nexport function getError(errors, status) {\n  var _errors;\n\n  errors = (_errors = errors) !== null && _errors !== void 0 ? _errors : [{\n    message: 'Failed to fetch Shopify API'\n  }];\n  return new FetcherError({\n    errors: errors,\n    status: status\n  });\n}\nexport function getAsyncError(_x) {\n  return _getAsyncError.apply(this, arguments);\n}\n\nfunction _getAsyncError() {\n  _getAsyncError = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(res) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return res.json();\n\n          case 2:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\", getError(data.errors, res.status));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getAsyncError.apply(this, arguments);\n}\n\nvar handleFetchResponse = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(res) {\n    var _yield$res$json, data, errors;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!res.ok) {\n              _context.next = 9;\n              break;\n            }\n\n            _context.next = 3;\n            return res.json();\n\n          case 3:\n            _yield$res$json = _context.sent;\n            data = _yield$res$json.data;\n            errors = _yield$res$json.errors;\n\n            if (!(errors && errors.length)) {\n              _context.next = 8;\n              break;\n            }\n\n            throw getError(errors, res.status);\n\n          case 8:\n            return _context.abrupt(\"return\", data);\n\n          case 9:\n            _context.next = 11;\n            return getAsyncError(res);\n\n          case 11:\n            throw _context.sent;\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function handleFetchResponse(_x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default handleFetchResponse;","map":{"version":3,"sources":["/Users/thejmdw/workspace/websites/next-commerce-test/framework/shopify/utils/handle-fetch-response.ts"],"names":["FetcherError","getError","errors","status","message","getAsyncError","res","json","data","handleFetchResponse","ok","length"],"mappings":";;AAAA,SAASA,YAAT,QAA6B,wBAA7B;AAEA,OAAO,SAASC,QAAT,CAAkBC,MAAlB,EAAiCC,MAAjC,EAAiD;AAAA;;AACtDD,EAAAA,MAAM,cAAGA,MAAH,6CAAa,CAAC;AAAEE,IAAAA,OAAO,EAAE;AAAX,GAAD,CAAnB;AACA,SAAO,IAAIJ,YAAJ,CAAiB;AAAEE,IAAAA,MAAM,EAANA,MAAF;AAAUC,IAAAA,MAAM,EAANA;AAAV,GAAjB,CAAP;AACD;AAED,gBAAsBE,aAAtB;AAAA;AAAA;;;4EAAO,kBAA6BC,GAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACcA,GAAG,CAACC,IAAJ,EADd;;AAAA;AACCC,YAAAA,IADD;AAAA,8CAEEP,QAAQ,CAACO,IAAI,CAACN,MAAN,EAAcI,GAAG,CAACH,MAAlB,CAFV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAKP,IAAMM,mBAAmB;AAAA,sEAAG,iBAAOH,GAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,iBACtBA,GAAG,CAACI,EADkB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAEOJ,GAAG,CAACC,IAAJ,EAFP;;AAAA;AAAA;AAEhBC,YAAAA,IAFgB,mBAEhBA,IAFgB;AAEVN,YAAAA,MAFU,mBAEVA,MAFU;;AAAA,kBAIpBA,MAAM,IAAIA,MAAM,CAACS,MAJG;AAAA;AAAA;AAAA;;AAAA,kBAKhBV,QAAQ,CAACC,MAAD,EAASI,GAAG,CAACH,MAAb,CALQ;;AAAA;AAAA,6CAQjBK,IARiB;;AAAA;AAAA;AAAA,mBAWdH,aAAa,CAACC,GAAD,CAXC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAnBG,mBAAmB;AAAA;AAAA;AAAA,GAAzB;;AAcA,eAAeA,mBAAf","sourcesContent":["import { FetcherError } from '@commerce/utils/errors'\n\nexport function getError(errors: any[], status: number) {\n  errors = errors ?? [{ message: 'Failed to fetch Shopify API' }]\n  return new FetcherError({ errors, status })\n}\n\nexport async function getAsyncError(res: Response) {\n  const data = await res.json()\n  return getError(data.errors, res.status)\n}\n\nconst handleFetchResponse = async (res: Response) => {\n  if (res.ok) {\n    const { data, errors } = await res.json()\n\n    if (errors && errors.length) {\n      throw getError(errors, res.status)\n    }\n\n    return data\n  }\n\n  throw await getAsyncError(res)\n}\n\nexport default handleFetchResponse\n"]},"metadata":{},"sourceType":"module"}