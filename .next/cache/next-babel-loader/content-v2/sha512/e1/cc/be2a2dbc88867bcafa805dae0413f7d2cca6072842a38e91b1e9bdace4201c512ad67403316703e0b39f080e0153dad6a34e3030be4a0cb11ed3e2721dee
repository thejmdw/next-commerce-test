{"ast":null,"code":"import _regeneratorRuntime from \"/Users/thejmdw/workspace/websites/next-commerce-test/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/thejmdw/workspace/websites/next-commerce-test/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/Users/thejmdw/workspace/websites/next-commerce-test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport fetchAllProducts from '../api/utils/fetch-all-products';\nimport getAllProductVendors from './queries/get-all-product-vendors-query';\n\nvar getVendors = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(config) {\n    var vendors, vendorsStrings;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetchAllProducts({\n              config: config,\n              query: getAllProductVendors,\n              variables: {\n                first: 250\n              }\n            });\n\n          case 2:\n            vendors = _context.sent;\n            vendorsStrings = vendors.map(function (_ref2) {\n              var vendor = _ref2.node.vendor;\n              return vendor;\n            });\n            return _context.abrupt(\"return\", _toConsumableArray(new Set(vendorsStrings)).map(function (v) {\n              var id = v.replace(/\\s+/g, '-').toLowerCase();\n              return {\n                node: {\n                  entityId: id,\n                  name: v,\n                  path: \"brands/\".concat(id)\n                }\n              };\n            }));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getVendors(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default getVendors;","map":{"version":3,"sources":["/Users/thejmdw/workspace/websites/next-commerce-test/framework/shopify/utils/get-vendors.ts"],"names":["fetchAllProducts","getAllProductVendors","getVendors","config","query","variables","first","vendors","vendorsStrings","map","vendor","node","Set","v","id","replace","toLowerCase","entityId","name","path"],"mappings":";;;AACA,OAAOA,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,oBAAP,MAAiC,yCAAjC;;AAcA,IAAMC,UAAU;AAAA,sEAAG,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACKH,gBAAgB,CAAC;AACrCG,cAAAA,MAAM,EAANA,MADqC;AAErCC,cAAAA,KAAK,EAAEH,oBAF8B;AAGrCI,cAAAA,SAAS,EAAE;AACTC,gBAAAA,KAAK,EAAE;AADE;AAH0B,aAAD,CADrB;;AAAA;AACXC,YAAAA,OADW;AASbC,YAAAA,cATa,GASID,OAAO,CAACE,GAAR,CAAY;AAAA,kBAAWC,MAAX,SAAGC,IAAH,CAAWD,MAAX;AAAA,qBAA0BA,MAA1B;AAAA,aAAZ,CATJ;AAAA,6CAWV,mBAAI,IAAIE,GAAJ,CAAQJ,cAAR,CAAJ,EAA6BC,GAA7B,CAAiC,UAACI,CAAD,EAAO;AAC7C,kBAAMC,EAAE,GAAGD,CAAC,CAACE,OAAF,CAAU,MAAV,EAAkB,GAAlB,EAAuBC,WAAvB,EAAX;AACA,qBAAO;AACLL,gBAAAA,IAAI,EAAE;AACJM,kBAAAA,QAAQ,EAAEH,EADN;AAEJI,kBAAAA,IAAI,EAAEL,CAFF;AAGJM,kBAAAA,IAAI,mBAAYL,EAAZ;AAHA;AADD,eAAP;AAOD,aATM,CAXU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVZ,UAAU;AAAA;AAAA;AAAA,GAAhB;;AAuBA,eAAeA,UAAf","sourcesContent":["import { ShopifyConfig } from '../api'\nimport fetchAllProducts from '../api/utils/fetch-all-products'\nimport getAllProductVendors from './queries/get-all-product-vendors-query'\n\nexport type Brand = {\n  entityId: string\n  name: string\n  path: string\n}\n\nexport type BrandEdge = {\n  node: Brand\n}\n\nexport type Brands = BrandEdge[]\n\nconst getVendors = async (config: ShopifyConfig): Promise<BrandEdge[]> => {\n  const vendors = await fetchAllProducts({\n    config,\n    query: getAllProductVendors,\n    variables: {\n      first: 250,\n    },\n  })\n\n  let vendorsStrings = vendors.map(({ node: { vendor } }) => vendor)\n\n  return [...new Set(vendorsStrings)].map((v) => {\n    const id = v.replace(/\\s+/g, '-').toLowerCase()\n    return {\n      node: {\n        entityId: id,\n        name: v,\n        path: `brands/${id}`,\n      },\n    }\n  })\n}\n\nexport default getVendors\n"]},"metadata":{},"sourceType":"module"}