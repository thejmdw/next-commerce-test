{"ast":null,"code":"import { setCustomerToken } from './customer-token';\nimport { customerAccessTokenCreateMutation } from './mutations';\nimport throwUserErrors from './throw-user-errors';\n\nconst handleLogin = data => {\n  const response = data.customerAccessTokenCreate;\n  throwUserErrors(response === null || response === void 0 ? void 0 : response.customerUserErrors);\n  const customerAccessToken = response === null || response === void 0 ? void 0 : response.customerAccessToken;\n  const accessToken = customerAccessToken === null || customerAccessToken === void 0 ? void 0 : customerAccessToken.accessToken;\n\n  if (accessToken) {\n    setCustomerToken(accessToken);\n  }\n\n  return customerAccessToken;\n};\n\nexport const handleAutomaticLogin = async (fetch, input) => {\n  try {\n    const loginData = await fetch({\n      query: customerAccessTokenCreateMutation,\n      variables: {\n        input\n      }\n    });\n    handleLogin(loginData);\n  } catch (error) {}\n};\nexport default handleLogin;","map":{"version":3,"sources":["/Users/thejmdw/workspace/websites/next-commerce-test/framework/shopify/utils/handle-login.ts"],"names":["setCustomerToken","customerAccessTokenCreateMutation","throwUserErrors","handleLogin","data","response","customerAccessTokenCreate","customerUserErrors","customerAccessToken","accessToken","handleAutomaticLogin","fetch","input","loginData","query","variables","error"],"mappings":"AAEA,SAASA,gBAAT,QAAiC,kBAAjC;AACA,SAASC,iCAAT,QAAkD,aAAlD;AACA,OAAOC,eAAP,MAA4B,qBAA5B;;AAEA,MAAMC,WAAW,GAAIC,IAAD,IAAe;AACjC,QAAMC,QAAQ,GAAGD,IAAI,CAACE,yBAAtB;AACAJ,EAAAA,eAAe,CAACG,QAAD,aAACA,QAAD,uBAACA,QAAQ,CAAEE,kBAAX,CAAf;AAEA,QAAMC,mBAAmB,GAAGH,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEG,mBAAtC;AACA,QAAMC,WAAW,GAAGD,mBAAH,aAAGA,mBAAH,uBAAGA,mBAAmB,CAAEC,WAAzC;;AAEA,MAAIA,WAAJ,EAAiB;AACfT,IAAAA,gBAAgB,CAACS,WAAD,CAAhB;AACD;;AAED,SAAOD,mBAAP;AACD,CAZD;;AAcA,OAAO,MAAME,oBAAoB,GAAG,OAClCC,KADkC,EAElCC,KAFkC,KAG/B;AACH,MAAI;AACF,UAAMC,SAAS,GAAG,MAAMF,KAAK,CAAC;AAC5BG,MAAAA,KAAK,EAAEb,iCADqB;AAE5Bc,MAAAA,SAAS,EAAE;AACTH,QAAAA;AADS;AAFiB,KAAD,CAA7B;AAMAT,IAAAA,WAAW,CAACU,SAAD,CAAX;AACD,GARD,CAQE,OAAOG,KAAP,EAAc,CAAE;AACnB,CAbM;AAeP,eAAeb,WAAf","sourcesContent":["import { FetcherOptions } from '@commerce/utils/types'\nimport { CustomerAccessTokenCreateInput } from '../schema'\nimport { setCustomerToken } from './customer-token'\nimport { customerAccessTokenCreateMutation } from './mutations'\nimport throwUserErrors from './throw-user-errors'\n\nconst handleLogin = (data: any) => {\n  const response = data.customerAccessTokenCreate\n  throwUserErrors(response?.customerUserErrors)\n\n  const customerAccessToken = response?.customerAccessToken\n  const accessToken = customerAccessToken?.accessToken\n\n  if (accessToken) {\n    setCustomerToken(accessToken)\n  }\n\n  return customerAccessToken\n}\n\nexport const handleAutomaticLogin = async (\n  fetch: <T = any, B = Body>(options: FetcherOptions<B>) => Promise<T>,\n  input: CustomerAccessTokenCreateInput\n) => {\n  try {\n    const loginData = await fetch({\n      query: customerAccessTokenCreateMutation,\n      variables: {\n        input,\n      },\n    })\n    handleLogin(loginData)\n  } catch (error) {}\n}\n\nexport default handleLogin\n"]},"metadata":{},"sourceType":"module"}