{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const SWRFetcher = ({\n  options,\n  fetch\n}) => fetch(options);\nexport const mutationFetcher = ({\n  input,\n  options,\n  fetch\n}) => fetch(_objectSpread(_objectSpread({}, options), {}, {\n  body: input\n}));\nexport default SWRFetcher;","map":{"version":3,"sources":["/Users/thejmdw/workspace/websites/next-commerce-test/framework/commerce/utils/default-fetcher.ts"],"names":["SWRFetcher","options","fetch","mutationFetcher","input","body"],"mappings":";;;;;;AAEA,OAAO,MAAMA,UAAmC,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAD,KACjDA,KAAK,CAACD,OAAD,CADA;AAGP,OAAO,MAAME,eAAwC,GAAG,CAAC;AACvDC,EAAAA,KADuD;AAEvDH,EAAAA,OAFuD;AAGvDC,EAAAA;AAHuD,CAAD,KAIlDA,KAAK,iCAAMD,OAAN;AAAeI,EAAAA,IAAI,EAAED;AAArB,GAJJ;AAMP,eAAeJ,UAAf","sourcesContent":["import type { HookFetcherFn } from './types'\n\nexport const SWRFetcher: HookFetcherFn<any, any> = ({ options, fetch }) =>\n  fetch(options)\n\nexport const mutationFetcher: HookFetcherFn<any, any> = ({\n  input,\n  options,\n  fetch,\n}) => fetch({ ...options, body: input })\n\nexport default SWRFetcher\n"]},"metadata":{},"sourceType":"module"}