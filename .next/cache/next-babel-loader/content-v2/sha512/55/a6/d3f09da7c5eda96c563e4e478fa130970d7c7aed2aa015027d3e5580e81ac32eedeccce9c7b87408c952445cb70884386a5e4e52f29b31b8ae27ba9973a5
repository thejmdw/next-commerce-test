{"ast":null,"code":"import useSWR from 'swr';\nimport defineProperty from './define-property';\nimport { CommerceError } from './errors';\n\nconst useData = (options, input, fetcherFn, swrOptions) => {\n  const hookInput = Array.isArray(input) ? input : Object.entries(input);\n\n  const fetcher = async (url, query, method, ...args) => {\n    try {\n      return await options.fetcher({\n        options: {\n          url,\n          query,\n          method\n        },\n        // Transform the input array into an object\n        input: args.reduce((obj, val, i) => {\n          obj[hookInput[i][0]] = val;\n          return obj;\n        }, {}),\n        fetch: fetcherFn\n      });\n    } catch (error) {\n      // SWR will not log errors, but any error that's not an instance\n      // of CommerceError is not welcomed by this hook\n      if (!(error instanceof CommerceError)) {\n        console.error(error);\n      }\n\n      throw error;\n    }\n  };\n\n  const response = useSWR(() => {\n    const opts = options.fetchOptions;\n    return opts ? [opts.url, opts.query, opts.method, ...hookInput.map(e => e[1])] : null;\n  }, fetcher, swrOptions);\n\n  if (!('isLoading' in response)) {\n    defineProperty(response, 'isLoading', {\n      get() {\n        return response.data === undefined;\n      },\n\n      enumerable: true\n    });\n  }\n\n  return response;\n};\n\nexport default useData;","map":{"version":3,"sources":["/Users/thejmdw/workspace/websites/next-commerce-test/framework/commerce/utils/use-data.tsx"],"names":["useSWR","defineProperty","CommerceError","useData","options","input","fetcherFn","swrOptions","hookInput","Array","isArray","Object","entries","fetcher","url","query","method","args","reduce","obj","val","i","fetch","error","console","response","opts","fetchOptions","map","e","get","data","undefined","enumerable"],"mappings":"AAAA,OAAOA,MAAP,MAA0C,KAA1C;AASA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,SAASC,aAAT,QAA8B,UAA9B;;AAgBA,MAAMC,OAAgB,GAAG,CAACC,OAAD,EAAUC,KAAV,EAAiBC,SAAjB,EAA4BC,UAA5B,KAA2C;AAClE,QAAMC,SAAS,GAAGC,KAAK,CAACC,OAAN,CAAcL,KAAd,IAAuBA,KAAvB,GAA+BM,MAAM,CAACC,OAAP,CAAeP,KAAf,CAAjD;;AACA,QAAMQ,OAAO,GAAG,OACdC,GADc,EAEdC,KAFc,EAGdC,MAHc,EAId,GAAGC,IAJW,KAKX;AACH,QAAI;AACF,aAAO,MAAMb,OAAO,CAACS,OAAR,CAAgB;AAC3BT,QAAAA,OAAO,EAAE;AAAEU,UAAAA,GAAF;AAAOC,UAAAA,KAAP;AAAcC,UAAAA;AAAd,SADkB;AAE3B;AACAX,QAAAA,KAAK,EAAEY,IAAI,CAACC,MAAL,CAAY,CAACC,GAAD,EAAMC,GAAN,EAAWC,CAAX,KAAiB;AAClCF,UAAAA,GAAG,CAACX,SAAS,CAACa,CAAD,CAAT,CAAa,CAAb,CAAD,CAAH,GAAwBD,GAAxB;AACA,iBAAOD,GAAP;AACD,SAHM,EAGJ,EAHI,CAHoB;AAO3BG,QAAAA,KAAK,EAAEhB;AAPoB,OAAhB,CAAb;AASD,KAVD,CAUE,OAAOiB,KAAP,EAAc;AACd;AACA;AACA,UAAI,EAAEA,KAAK,YAAYrB,aAAnB,CAAJ,EAAuC;AACrCsB,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;;AACD,YAAMA,KAAN;AACD;AACF,GAxBD;;AAyBA,QAAME,QAAQ,GAAGzB,MAAM,CACrB,MAAM;AACJ,UAAM0B,IAAI,GAAGtB,OAAO,CAACuB,YAArB;AACA,WAAOD,IAAI,GACP,CAACA,IAAI,CAACZ,GAAN,EAAWY,IAAI,CAACX,KAAhB,EAAuBW,IAAI,CAACV,MAA5B,EAAoC,GAAGR,SAAS,CAACoB,GAAV,CAAeC,CAAD,IAAOA,CAAC,CAAC,CAAD,CAAtB,CAAvC,CADO,GAEP,IAFJ;AAGD,GANoB,EAOrBhB,OAPqB,EAQrBN,UARqB,CAAvB;;AAWA,MAAI,EAAE,eAAekB,QAAjB,CAAJ,EAAgC;AAC9BxB,IAAAA,cAAc,CAACwB,QAAD,EAAW,WAAX,EAAwB;AACpCK,MAAAA,GAAG,GAAG;AACJ,eAAOL,QAAQ,CAACM,IAAT,KAAkBC,SAAzB;AACD,OAHmC;;AAIpCC,MAAAA,UAAU,EAAE;AAJwB,KAAxB,CAAd;AAMD;;AAED,SAAOR,QAAP;AACD,CAhDD;;AAkDA,eAAetB,OAAf","sourcesContent":["import useSWR, { responseInterface } from 'swr'\nimport type {\n  HookSWRInput,\n  HookFetchInput,\n  Fetcher,\n  SwrOptions,\n  HookFetcherOptions,\n  HookFetcherFn,\n} from './types'\nimport defineProperty from './define-property'\nimport { CommerceError } from './errors'\n\nexport type ResponseState<Result> = responseInterface<Result, CommerceError> & {\n  isLoading: boolean\n}\n\nexport type UseData = <Data = any, FetchInput extends HookFetchInput = {}>(\n  options: {\n    fetchOptions: HookFetcherOptions\n    fetcher: HookFetcherFn<Data, FetchInput>\n  },\n  input: HookFetchInput | HookSWRInput,\n  fetcherFn: Fetcher,\n  swrOptions?: SwrOptions<Data, FetchInput>\n) => ResponseState<Data>\n\nconst useData: UseData = (options, input, fetcherFn, swrOptions) => {\n  const hookInput = Array.isArray(input) ? input : Object.entries(input)\n  const fetcher = async (\n    url: string,\n    query?: string,\n    method?: string,\n    ...args: any[]\n  ) => {\n    try {\n      return await options.fetcher({\n        options: { url, query, method },\n        // Transform the input array into an object\n        input: args.reduce((obj, val, i) => {\n          obj[hookInput[i][0]!] = val\n          return obj\n        }, {}),\n        fetch: fetcherFn,\n      })\n    } catch (error) {\n      // SWR will not log errors, but any error that's not an instance\n      // of CommerceError is not welcomed by this hook\n      if (!(error instanceof CommerceError)) {\n        console.error(error)\n      }\n      throw error\n    }\n  }\n  const response = useSWR(\n    () => {\n      const opts = options.fetchOptions\n      return opts\n        ? [opts.url, opts.query, opts.method, ...hookInput.map((e) => e[1])]\n        : null\n    },\n    fetcher,\n    swrOptions\n  )\n\n  if (!('isLoading' in response)) {\n    defineProperty(response, 'isLoading', {\n      get() {\n        return response.data === undefined\n      },\n      enumerable: true,\n    })\n  }\n\n  return response\n}\n\nexport default useData\n"]},"metadata":{},"sourceType":"module"}