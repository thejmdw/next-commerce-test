{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useCallback } from 'react';\nimport { CommerceError } from '@commerce/utils/errors';\nimport useSignup from '@commerce/auth/use-signup';\nimport useCustomer from '../customer/use-customer';\nimport { customerCreateMutation } from '../utils/mutations';\nimport { handleAutomaticLogin, throwUserErrors } from '../utils';\nexport default useSignup;\nexport const handler = {\n  fetchOptions: {\n    query: customerCreateMutation\n  },\n\n  async fetcher({\n    input: {\n      firstName,\n      lastName,\n      email,\n      password\n    },\n    options,\n    fetch\n  }) {\n    if (!(firstName && lastName && email && password)) {\n      throw new CommerceError({\n        message: 'A first name, last name, email and password are required to signup'\n      });\n    }\n\n    const {\n      customerCreate\n    } = await fetch(_objectSpread(_objectSpread({}, options), {}, {\n      variables: {\n        input: {\n          firstName,\n          lastName,\n          email,\n          password\n        }\n      }\n    }));\n    throwUserErrors(customerCreate === null || customerCreate === void 0 ? void 0 : customerCreate.customerUserErrors);\n    await handleAutomaticLogin(fetch, {\n      email,\n      password\n    });\n    return null;\n  },\n\n  useHook: ({\n    fetch\n  }) => () => {\n    const {\n      revalidate\n    } = useCustomer();\n    return useCallback(async function signup(input) {\n      const data = await fetch({\n        input\n      });\n      await revalidate();\n      return data;\n    }, [fetch, revalidate]);\n  }\n};","map":{"version":3,"sources":["/Users/thejmdw/workspace/websites/next-commerce-test/framework/shopify/auth/use-signup.tsx"],"names":["useCallback","CommerceError","useSignup","useCustomer","customerCreateMutation","handleAutomaticLogin","throwUserErrors","handler","fetchOptions","query","fetcher","input","firstName","lastName","email","password","options","fetch","message","customerCreate","variables","customerUserErrors","useHook","revalidate","signup","data"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AAEA,SAASC,aAAT,QAA+C,wBAA/C;AACA,OAAOC,SAAP,MAAqC,2BAArC;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AAOA,SAASC,sBAAT,QAAuC,oBAAvC;AACA,SAASC,oBAAT,EAA+BC,eAA/B,QAAsD,UAAtD;AAEA,eAAeJ,SAAf;AAEA,OAAO,MAAMK,OAKZ,GAAG;AACFC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAEL;AADK,GADZ;;AAIF,QAAMM,OAAN,CAAc;AACZC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,QAAb;AAAuBC,MAAAA,KAAvB;AAA8BC,MAAAA;AAA9B,KADK;AAEZC,IAAAA,OAFY;AAGZC,IAAAA;AAHY,GAAd,EAIG;AACD,QAAI,EAAEL,SAAS,IAAIC,QAAb,IAAyBC,KAAzB,IAAkCC,QAApC,CAAJ,EAAmD;AACjD,YAAM,IAAId,aAAJ,CAAkB;AACtBiB,QAAAA,OAAO,EACL;AAFoB,OAAlB,CAAN;AAID;;AAED,UAAM;AAAEC,MAAAA;AAAF,QAAqB,MAAMF,KAAK,iCAIjCD,OAJiC;AAKpCI,MAAAA,SAAS,EAAE;AACTT,QAAAA,KAAK,EAAE;AACLC,UAAAA,SADK;AAELC,UAAAA,QAFK;AAGLC,UAAAA,KAHK;AAILC,UAAAA;AAJK;AADE;AALyB,OAAtC;AAeAT,IAAAA,eAAe,CAACa,cAAD,aAACA,cAAD,uBAACA,cAAc,CAAEE,kBAAjB,CAAf;AACA,UAAMhB,oBAAoB,CAACY,KAAD,EAAQ;AAAEH,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAR,CAA1B;AAEA,WAAO,IAAP;AACD,GAnCC;;AAoCFO,EAAAA,OAAO,EAAE,CAAC;AAAEL,IAAAA;AAAF,GAAD,KAAe,MAAM;AAC5B,UAAM;AAAEM,MAAAA;AAAF,QAAiBpB,WAAW,EAAlC;AAEA,WAAOH,WAAW,CAChB,eAAewB,MAAf,CAAsBb,KAAtB,EAA6B;AAC3B,YAAMc,IAAI,GAAG,MAAMR,KAAK,CAAC;AAAEN,QAAAA;AAAF,OAAD,CAAxB;AACA,YAAMY,UAAU,EAAhB;AACA,aAAOE,IAAP;AACD,KALe,EAMhB,CAACR,KAAD,EAAQM,UAAR,CANgB,CAAlB;AAQD;AA/CC,CALG","sourcesContent":["import { useCallback } from 'react'\nimport type { MutationHook } from '@commerce/utils/types'\nimport { CommerceError, ValidationError } from '@commerce/utils/errors'\nimport useSignup, { UseSignup } from '@commerce/auth/use-signup'\nimport useCustomer from '../customer/use-customer'\nimport {\n  CustomerCreateInput,\n  Mutation,\n  MutationCustomerCreateArgs,\n} from '../schema'\n\nimport { customerCreateMutation } from '../utils/mutations'\nimport { handleAutomaticLogin, throwUserErrors } from '../utils'\n\nexport default useSignup as UseSignup<typeof handler>\n\nexport const handler: MutationHook<\n  null,\n  {},\n  CustomerCreateInput,\n  CustomerCreateInput\n> = {\n  fetchOptions: {\n    query: customerCreateMutation,\n  },\n  async fetcher({\n    input: { firstName, lastName, email, password },\n    options,\n    fetch,\n  }) {\n    if (!(firstName && lastName && email && password)) {\n      throw new CommerceError({\n        message:\n          'A first name, last name, email and password are required to signup',\n      })\n    }\n\n    const { customerCreate } = await fetch<\n      Mutation,\n      MutationCustomerCreateArgs\n    >({\n      ...options,\n      variables: {\n        input: {\n          firstName,\n          lastName,\n          email,\n          password,\n        },\n      },\n    })\n\n    throwUserErrors(customerCreate?.customerUserErrors)\n    await handleAutomaticLogin(fetch, { email, password })\n\n    return null\n  },\n  useHook: ({ fetch }) => () => {\n    const { revalidate } = useCustomer()\n\n    return useCallback(\n      async function signup(input) {\n        const data = await fetch({ input })\n        await revalidate()\n        return data\n      },\n      [fetch, revalidate]\n    )\n  },\n}\n"]},"metadata":{},"sourceType":"module"}