{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useCallback } from 'react';\nimport { ValidationError } from '@commerce/utils/errors';\nimport useRemoveItem from '@commerce/cart/use-remove-item';\nimport useCart from './use-cart';\nimport { checkoutLineItemRemoveMutation, getCheckoutId, checkoutToCart } from '../utils';\nexport default useRemoveItem;\nexport const handler = {\n  fetchOptions: {\n    query: checkoutLineItemRemoveMutation\n  },\n\n  async fetcher({\n    input: {\n      itemId\n    },\n    options,\n    fetch\n  }) {\n    const data = await fetch(_objectSpread(_objectSpread({}, options), {}, {\n      variables: {\n        checkoutId: getCheckoutId(),\n        lineItemIds: [itemId]\n      }\n    }));\n    return checkoutToCart(data.checkoutLineItemsRemove);\n  },\n\n  useHook: ({\n    fetch\n  }) => (ctx = {}) => {\n    const {\n      item\n    } = ctx;\n    const {\n      mutate\n    } = useCart();\n\n    const removeItem = async input => {\n      var _input$id;\n\n      const itemId = (_input$id = input === null || input === void 0 ? void 0 : input.id) !== null && _input$id !== void 0 ? _input$id : item === null || item === void 0 ? void 0 : item.id;\n\n      if (!itemId) {\n        throw new ValidationError({\n          message: 'Invalid input used for this operation'\n        });\n      }\n\n      const data = await fetch({\n        input: {\n          itemId\n        }\n      });\n      await mutate(data, false);\n      return data;\n    };\n\n    return useCallback(removeItem, [fetch, mutate]);\n  }\n};","map":{"version":3,"sources":["/Users/thejmdw/workspace/websites/next-commerce-test/framework/shopify/cart/use-remove-item.tsx"],"names":["useCallback","ValidationError","useRemoveItem","useCart","checkoutLineItemRemoveMutation","getCheckoutId","checkoutToCart","handler","fetchOptions","query","fetcher","input","itemId","options","fetch","data","variables","checkoutId","lineItemIds","checkoutLineItemsRemove","useHook","ctx","item","mutate","removeItem","id","message"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AAMA,SAASC,eAAT,QAAgC,wBAAhC;AACA,OAAOC,aAAP,MAGO,gCAHP;AAIA,OAAOC,OAAP,MAAoB,YAApB;AACA,SACEC,8BADF,EAEEC,aAFF,EAGEC,cAHF,QAIO,UAJP;AAgBA,eAAeJ,aAAf;AAEA,OAAO,MAAMK,OAAO,GAAG;AACrBC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAEL;AADK,GADO;;AAIrB,QAAMM,OAAN,CAAc;AACZC,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF,KADK;AAEZC,IAAAA,OAFY;AAGZC,IAAAA;AAHY,GAAd,EAI2C;AACzC,UAAMC,IAAI,GAAG,MAAMD,KAAK,iCACnBD,OADmB;AAEtBG,MAAAA,SAAS,EAAE;AAAEC,QAAAA,UAAU,EAAEZ,aAAa,EAA3B;AAA+Ba,QAAAA,WAAW,EAAE,CAACN,MAAD;AAA5C;AAFW,OAAxB;AAIA,WAAON,cAAc,CAACS,IAAI,CAACI,uBAAN,CAArB;AACD,GAdoB;;AAerBC,EAAAA,OAAO,EAAE,CAAC;AACRN,IAAAA;AADQ,GAAD,KAEmD,CAG1DO,GAAiB,GAAG,EAHsC,KAIvD;AACH,UAAM;AAAEC,MAAAA;AAAF,QAAWD,GAAjB;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAapB,OAAO,EAA1B;;AACA,UAAMqB,UAAkC,GAAG,MAAOb,KAAP,IAAiB;AAAA;;AAC1D,YAAMC,MAAM,gBAAGD,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEc,EAAV,iDAAgBH,IAAhB,aAAgBA,IAAhB,uBAAgBA,IAAI,CAAEG,EAAlC;;AAEA,UAAI,CAACb,MAAL,EAAa;AACX,cAAM,IAAIX,eAAJ,CAAoB;AACxByB,UAAAA,OAAO,EAAE;AADe,SAApB,CAAN;AAGD;;AAED,YAAMX,IAAI,GAAG,MAAMD,KAAK,CAAC;AAAEH,QAAAA,KAAK,EAAE;AAAEC,UAAAA;AAAF;AAAT,OAAD,CAAxB;AACA,YAAMW,MAAM,CAACR,IAAD,EAAO,KAAP,CAAZ;AACA,aAAOA,IAAP;AACD,KAZD;;AAcA,WAAOf,WAAW,CAACwB,UAAD,EAAgC,CAACV,KAAD,EAAQS,MAAR,CAAhC,CAAlB;AACD;AAvCoB,CAAhB","sourcesContent":["import { useCallback } from 'react'\nimport type {\n  MutationHookContext,\n  HookFetcherContext,\n} from '@commerce/utils/types'\nimport { RemoveCartItemBody } from '@commerce/types'\nimport { ValidationError } from '@commerce/utils/errors'\nimport useRemoveItem, {\n  RemoveItemInput as RemoveItemInputBase,\n  UseRemoveItem,\n} from '@commerce/cart/use-remove-item'\nimport useCart from './use-cart'\nimport {\n  checkoutLineItemRemoveMutation,\n  getCheckoutId,\n  checkoutToCart,\n} from '../utils'\nimport { Cart, LineItem } from '../types'\nimport { Mutation, MutationCheckoutLineItemsRemoveArgs } from '../schema'\n\nexport type RemoveItemFn<T = any> = T extends LineItem\n  ? (input?: RemoveItemInput<T>) => Promise<Cart | null>\n  : (input: RemoveItemInput<T>) => Promise<Cart | null>\n\nexport type RemoveItemInput<T = any> = T extends LineItem\n  ? Partial<RemoveItemInputBase>\n  : RemoveItemInputBase\n\nexport default useRemoveItem as UseRemoveItem<typeof handler>\n\nexport const handler = {\n  fetchOptions: {\n    query: checkoutLineItemRemoveMutation,\n  },\n  async fetcher({\n    input: { itemId },\n    options,\n    fetch,\n  }: HookFetcherContext<RemoveCartItemBody>) {\n    const data = await fetch<Mutation, MutationCheckoutLineItemsRemoveArgs>({\n      ...options,\n      variables: { checkoutId: getCheckoutId(), lineItemIds: [itemId] },\n    })\n    return checkoutToCart(data.checkoutLineItemsRemove)\n  },\n  useHook: ({\n    fetch,\n  }: MutationHookContext<Cart | null, RemoveCartItemBody>) => <\n    T extends LineItem | undefined = undefined\n  >(\n    ctx: { item?: T } = {}\n  ) => {\n    const { item } = ctx\n    const { mutate } = useCart()\n    const removeItem: RemoveItemFn<LineItem> = async (input) => {\n      const itemId = input?.id ?? item?.id\n\n      if (!itemId) {\n        throw new ValidationError({\n          message: 'Invalid input used for this operation',\n        })\n      }\n\n      const data = await fetch({ input: { itemId } })\n      await mutate(data, false)\n      return data\n    }\n\n    return useCallback(removeItem as RemoveItemFn<T>, [fetch, mutate])\n  },\n}\n"]},"metadata":{},"sourceType":"module"}