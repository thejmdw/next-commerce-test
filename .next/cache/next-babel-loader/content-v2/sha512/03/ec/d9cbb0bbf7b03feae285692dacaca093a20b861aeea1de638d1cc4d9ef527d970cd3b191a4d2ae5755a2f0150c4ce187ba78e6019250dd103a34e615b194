{"ast":null,"code":"import fetchAllProducts from '../api/utils/fetch-all-products';\nimport getAllProductVendors from './queries/get-all-product-vendors-query';\n\nconst getVendors = async config => {\n  const vendors = await fetchAllProducts({\n    config,\n    query: getAllProductVendors,\n    variables: {\n      first: 250\n    }\n  });\n  let vendorsStrings = vendors.map(({\n    node: {\n      vendor\n    }\n  }) => vendor);\n  return [...new Set(vendorsStrings)].map(v => {\n    const id = v.replace(/\\s+/g, '-').toLowerCase();\n    return {\n      node: {\n        entityId: id,\n        name: v,\n        path: `brands/${id}`\n      }\n    };\n  });\n};\n\nexport default getVendors;","map":{"version":3,"sources":["/Users/thejmdw/workspace/websites/next-commerce-test/framework/shopify/utils/get-vendors.ts"],"names":["fetchAllProducts","getAllProductVendors","getVendors","config","vendors","query","variables","first","vendorsStrings","map","node","vendor","Set","v","id","replace","toLowerCase","entityId","name","path"],"mappings":"AACA,OAAOA,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,oBAAP,MAAiC,yCAAjC;;AAcA,MAAMC,UAAU,GAAG,MAAOC,MAAP,IAAuD;AACxE,QAAMC,OAAO,GAAG,MAAMJ,gBAAgB,CAAC;AACrCG,IAAAA,MADqC;AAErCE,IAAAA,KAAK,EAAEJ,oBAF8B;AAGrCK,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAE;AADE;AAH0B,GAAD,CAAtC;AAQA,MAAIC,cAAc,GAAGJ,OAAO,CAACK,GAAR,CAAY,CAAC;AAAEC,IAAAA,IAAI,EAAE;AAAEC,MAAAA;AAAF;AAAR,GAAD,KAA0BA,MAAtC,CAArB;AAEA,SAAO,CAAC,GAAG,IAAIC,GAAJ,CAAQJ,cAAR,CAAJ,EAA6BC,GAA7B,CAAkCI,CAAD,IAAO;AAC7C,UAAMC,EAAE,GAAGD,CAAC,CAACE,OAAF,CAAU,MAAV,EAAkB,GAAlB,EAAuBC,WAAvB,EAAX;AACA,WAAO;AACLN,MAAAA,IAAI,EAAE;AACJO,QAAAA,QAAQ,EAAEH,EADN;AAEJI,QAAAA,IAAI,EAAEL,CAFF;AAGJM,QAAAA,IAAI,EAAG,UAASL,EAAG;AAHf;AADD,KAAP;AAOD,GATM,CAAP;AAUD,CArBD;;AAuBA,eAAeZ,UAAf","sourcesContent":["import { ShopifyConfig } from '../api'\nimport fetchAllProducts from '../api/utils/fetch-all-products'\nimport getAllProductVendors from './queries/get-all-product-vendors-query'\n\nexport type Brand = {\n  entityId: string\n  name: string\n  path: string\n}\n\nexport type BrandEdge = {\n  node: Brand\n}\n\nexport type Brands = BrandEdge[]\n\nconst getVendors = async (config: ShopifyConfig): Promise<BrandEdge[]> => {\n  const vendors = await fetchAllProducts({\n    config,\n    query: getAllProductVendors,\n    variables: {\n      first: 250,\n    },\n  })\n\n  let vendorsStrings = vendors.map(({ node: { vendor } }) => vendor)\n\n  return [...new Set(vendorsStrings)].map((v) => {\n    const id = v.replace(/\\s+/g, '-').toLowerCase()\n    return {\n      node: {\n        entityId: id,\n        name: v,\n        path: `brands/${id}`,\n      },\n    }\n  })\n}\n\nexport default getVendors\n"]},"metadata":{},"sourceType":"module"}