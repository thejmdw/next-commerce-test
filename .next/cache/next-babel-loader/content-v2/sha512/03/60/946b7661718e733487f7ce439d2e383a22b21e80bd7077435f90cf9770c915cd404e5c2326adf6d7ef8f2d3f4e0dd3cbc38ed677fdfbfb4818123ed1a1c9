{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/thejmdw/workspace/websites/next-commerce-test/framework/commerce/index.tsx\";\nimport { createContext, useContext, useMemo, useRef } from 'react';\nconst Commerce = /*#__PURE__*/createContext({});\nexport function CommerceProvider({\n  provider,\n  children,\n  config\n}) {\n  if (!config) {\n    throw new Error('CommerceProvider requires a valid config object');\n  }\n\n  const providerRef = useRef(provider); // TODO: Remove the fetcherRef\n\n  const fetcherRef = useRef(provider.fetcher); // Because the config is an object, if the parent re-renders this provider\n  // will re-render every consumer unless we memoize the config\n\n  const cfg = useMemo(() => ({\n    providerRef,\n    fetcherRef,\n    locale: config.locale,\n    cartCookie: config.cartCookie\n  }), [config.locale, config.cartCookie]);\n  return /*#__PURE__*/_jsxDEV(Commerce.Provider, {\n    value: cfg,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 10\n  }, this);\n}\nexport function useCommerce() {\n  return useContext(Commerce);\n}","map":{"version":3,"sources":["/Users/thejmdw/workspace/websites/next-commerce-test/framework/commerce/index.tsx"],"names":["createContext","useContext","useMemo","useRef","Commerce","CommerceProvider","provider","children","config","Error","providerRef","fetcherRef","fetcher","cfg","locale","cartCookie","useCommerce"],"mappings":";;AAAA,SAGEA,aAHF,EAIEC,UAJF,EAKEC,OALF,EAMEC,MANF,QAOO,OAPP;AAYA,MAAMC,QAAQ,gBAAGJ,aAAa,CAAiC,EAAjC,CAA9B;AA8CA,OAAO,SAASK,gBAAT,CAA8C;AACnDC,EAAAA,QADmD;AAEnDC,EAAAA,QAFmD;AAGnDC,EAAAA;AAHmD,CAA9C,EAIc;AACnB,MAAI,CAACA,MAAL,EAAa;AACX,UAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;AACD;;AAED,QAAMC,WAAW,GAAGP,MAAM,CAACG,QAAD,CAA1B,CALmB,CAMnB;;AACA,QAAMK,UAAU,GAAGR,MAAM,CAACG,QAAQ,CAACM,OAAV,CAAzB,CAPmB,CAQnB;AACA;;AACA,QAAMC,GAAG,GAAGX,OAAO,CACjB,OAAO;AACLQ,IAAAA,WADK;AAELC,IAAAA,UAFK;AAGLG,IAAAA,MAAM,EAAEN,MAAM,CAACM,MAHV;AAILC,IAAAA,UAAU,EAAEP,MAAM,CAACO;AAJd,GAAP,CADiB,EAOjB,CAACP,MAAM,CAACM,MAAR,EAAgBN,MAAM,CAACO,UAAvB,CAPiB,CAAnB;AAUA,sBAAO,QAAC,QAAD,CAAU,QAAV;AAAmB,IAAA,KAAK,EAAEF,GAA1B;AAAA,cAAgCN;AAAhC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;AAED,OAAO,SAASS,WAAT,GAA2C;AAChD,SAAOf,UAAU,CAACG,QAAD,CAAjB;AACD","sourcesContent":["import {\n  ReactNode,\n  MutableRefObject,\n  createContext,\n  useContext,\n  useMemo,\n  useRef,\n} from 'react'\nimport { Fetcher, SWRHook, MutationHook } from './utils/types'\nimport type { FetchCartInput } from './cart/use-cart'\nimport type { Cart, Wishlist, Customer, SearchProductsData } from './types'\n\nconst Commerce = createContext<CommerceContextValue<any> | {}>({})\n\nexport type Provider = CommerceConfig & {\n  fetcher: Fetcher\n  cart?: {\n    useCart?: SWRHook<Cart | null, any, FetchCartInput>\n    useAddItem?: MutationHook<any, any, any>\n    useUpdateItem?: MutationHook<any, any, any>\n    useRemoveItem?: MutationHook<any, any, any>\n  }\n  wishlist?: {\n    useWishlist?: SWRHook<Wishlist | null, any, any>\n    useAddItem?: MutationHook<any, any, any>\n    useRemoveItem?: MutationHook<any, any, any>\n  }\n  customer?: {\n    useCustomer?: SWRHook<Customer | null, any, any>\n  }\n  products?: {\n    useSearch?: SWRHook<SearchProductsData, any, any>\n  }\n  auth?: {\n    useSignup?: MutationHook<any, any, any>\n    useLogin?: MutationHook<any, any, any>\n    useLogout?: MutationHook<any, any, any>\n  }\n}\n\nexport type CommerceProps<P extends Provider> = {\n  children?: ReactNode\n  provider: P\n  config: CommerceConfig\n}\n\nexport type CommerceConfig = Omit<\n  CommerceContextValue<any>,\n  'providerRef' | 'fetcherRef'\n>\n\nexport type CommerceContextValue<P extends Provider> = {\n  providerRef: MutableRefObject<P>\n  fetcherRef: MutableRefObject<Fetcher>\n  locale: string\n  cartCookie: string\n}\n\nexport function CommerceProvider<P extends Provider>({\n  provider,\n  children,\n  config,\n}: CommerceProps<P>) {\n  if (!config) {\n    throw new Error('CommerceProvider requires a valid config object')\n  }\n\n  const providerRef = useRef(provider)\n  // TODO: Remove the fetcherRef\n  const fetcherRef = useRef(provider.fetcher)\n  // Because the config is an object, if the parent re-renders this provider\n  // will re-render every consumer unless we memoize the config\n  const cfg = useMemo(\n    () => ({\n      providerRef,\n      fetcherRef,\n      locale: config.locale,\n      cartCookie: config.cartCookie,\n    }),\n    [config.locale, config.cartCookie]\n  )\n\n  return <Commerce.Provider value={cfg}>{children}</Commerce.Provider>\n}\n\nexport function useCommerce<P extends Provider>() {\n  return useContext(Commerce) as CommerceContextValue<P>\n}\n"]},"metadata":{},"sourceType":"module"}