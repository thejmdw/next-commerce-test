{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport getSlug from './get-slug';\nexport function useSearchMeta(asPath) {\n  const {\n    0: pathname,\n    1: setPathname\n  } = useState('/search');\n  const {\n    0: category,\n    1: setCategory\n  } = useState();\n  const {\n    0: brand,\n    1: setBrand\n  } = useState();\n  useEffect(() => {\n    // Only access asPath after hydration to avoid a server mismatch\n    const path = asPath.split('?')[0];\n    const parts = path.split('/');\n    let c = parts[2];\n    let b = parts[3];\n\n    if (c === 'designers') {\n      c = parts[4];\n    }\n\n    setPathname(path);\n    if (c !== category) setCategory(c);\n    if (b !== brand) setBrand(b);\n  }, [asPath]);\n  return {\n    pathname,\n    category,\n    brand\n  };\n} // Removes empty query parameters from the query object\n\nexport const filterQuery = query => Object.keys(query).reduce((obj, key) => {\n  var _query$key;\n\n  if ((_query$key = query[key]) !== null && _query$key !== void 0 && _query$key.length) {\n    obj[key] = query[key];\n  }\n\n  return obj;\n}, {});\nexport const getCategoryPath = (path, brand) => {\n  const category = getSlug(path);\n  return `/search${brand ? `/designers/${brand}` : ''}${category ? `/${category}` : ''}`;\n};\nexport const getDesignerPath = (path, category) => {\n  const designer = getSlug(path).replace(/^brands/, 'designers');\n  return `/search${designer ? `/${designer}` : ''}${category ? `/${category}` : ''}`;\n};","map":{"version":3,"sources":["/Users/thejmdw/workspace/websites/next-commerce-test/lib/search.tsx"],"names":["useEffect","useState","getSlug","useSearchMeta","asPath","pathname","setPathname","category","setCategory","brand","setBrand","path","split","parts","c","b","filterQuery","query","Object","keys","reduce","obj","key","length","getCategoryPath","getDesignerPath","designer","replace"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,OAAP,MAAoB,YAApB;AAEA,OAAO,SAASC,aAAT,CAAuBC,MAAvB,EAAuC;AAC5C,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BL,QAAQ,CAAS,SAAT,CAAxC;AACA,QAAM;AAAA,OAACM,QAAD;AAAA,OAAWC;AAAX,MAA0BP,QAAQ,EAAxC;AACA,QAAM;AAAA,OAACQ,KAAD;AAAA,OAAQC;AAAR,MAAoBT,QAAQ,EAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMW,IAAI,GAAGP,MAAM,CAACQ,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAb;AACA,UAAMC,KAAK,GAAGF,IAAI,CAACC,KAAL,CAAW,GAAX,CAAd;AAEA,QAAIE,CAAC,GAAGD,KAAK,CAAC,CAAD,CAAb;AACA,QAAIE,CAAC,GAAGF,KAAK,CAAC,CAAD,CAAb;;AAEA,QAAIC,CAAC,KAAK,WAAV,EAAuB;AACrBA,MAAAA,CAAC,GAAGD,KAAK,CAAC,CAAD,CAAT;AACD;;AAEDP,IAAAA,WAAW,CAACK,IAAD,CAAX;AACA,QAAIG,CAAC,KAAKP,QAAV,EAAoBC,WAAW,CAACM,CAAD,CAAX;AACpB,QAAIC,CAAC,KAAKN,KAAV,EAAiBC,QAAQ,CAACK,CAAD,CAAR;AAClB,GAfQ,EAeN,CAACX,MAAD,CAfM,CAAT;AAiBA,SAAO;AAAEC,IAAAA,QAAF;AAAYE,IAAAA,QAAZ;AAAsBE,IAAAA;AAAtB,GAAP;AACD,C,CAED;;AACA,OAAO,MAAMO,WAAW,GAAIC,KAAD,IACzBC,MAAM,CAACC,IAAP,CAAYF,KAAZ,EAAmBG,MAAnB,CAA+B,CAACC,GAAD,EAAMC,GAAN,KAAc;AAAA;;AAC3C,oBAAIL,KAAK,CAACK,GAAD,CAAT,uCAAI,WAAYC,MAAhB,EAAwB;AACtBF,IAAAA,GAAG,CAACC,GAAD,CAAH,GAAWL,KAAK,CAACK,GAAD,CAAhB;AACD;;AACD,SAAOD,GAAP;AACD,CALD,EAKG,EALH,CADK;AAQP,OAAO,MAAMG,eAAe,GAAG,CAACb,IAAD,EAAeF,KAAf,KAAkC;AAC/D,QAAMF,QAAQ,GAAGL,OAAO,CAACS,IAAD,CAAxB;AAEA,SAAQ,UAASF,KAAK,GAAI,cAAaA,KAAM,EAAvB,GAA2B,EAAG,GAClDF,QAAQ,GAAI,IAAGA,QAAS,EAAhB,GAAoB,EAC7B,EAFD;AAGD,CANM;AAQP,OAAO,MAAMkB,eAAe,GAAG,CAACd,IAAD,EAAeJ,QAAf,KAAqC;AAClE,QAAMmB,QAAQ,GAAGxB,OAAO,CAACS,IAAD,CAAP,CAAcgB,OAAd,CAAsB,SAAtB,EAAiC,WAAjC,CAAjB;AAEA,SAAQ,UAASD,QAAQ,GAAI,IAAGA,QAAS,EAAhB,GAAoB,EAAG,GAC9CnB,QAAQ,GAAI,IAAGA,QAAS,EAAhB,GAAoB,EAC7B,EAFD;AAGD,CANM","sourcesContent":["import { useEffect, useState } from 'react'\nimport getSlug from './get-slug'\n\nexport function useSearchMeta(asPath: string) {\n  const [pathname, setPathname] = useState<string>('/search')\n  const [category, setCategory] = useState<string | undefined>()\n  const [brand, setBrand] = useState<string | undefined>()\n\n  useEffect(() => {\n    // Only access asPath after hydration to avoid a server mismatch\n    const path = asPath.split('?')[0]\n    const parts = path.split('/')\n\n    let c = parts[2]\n    let b = parts[3]\n\n    if (c === 'designers') {\n      c = parts[4]\n    }\n\n    setPathname(path)\n    if (c !== category) setCategory(c)\n    if (b !== brand) setBrand(b)\n  }, [asPath])\n\n  return { pathname, category, brand }\n}\n\n// Removes empty query parameters from the query object\nexport const filterQuery = (query: any) =>\n  Object.keys(query).reduce<any>((obj, key) => {\n    if (query[key]?.length) {\n      obj[key] = query[key]\n    }\n    return obj\n  }, {})\n\nexport const getCategoryPath = (path: string, brand?: string) => {\n  const category = getSlug(path)\n\n  return `/search${brand ? `/designers/${brand}` : ''}${\n    category ? `/${category}` : ''\n  }`\n}\n\nexport const getDesignerPath = (path: string, category?: string) => {\n  const designer = getSlug(path).replace(/^brands/, 'designers')\n\n  return `/search${designer ? `/${designer}` : ''}${\n    category ? `/${category}` : ''\n  }`\n}\n"]},"metadata":{},"sourceType":"module"}