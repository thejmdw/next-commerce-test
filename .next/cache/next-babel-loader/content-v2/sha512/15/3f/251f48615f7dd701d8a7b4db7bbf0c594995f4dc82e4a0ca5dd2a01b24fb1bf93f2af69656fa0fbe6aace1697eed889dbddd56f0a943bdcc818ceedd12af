{"ast":null,"code":"import _regeneratorRuntime from \"/Users/thejmdw/workspace/websites/next-commerce-test/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/Users/thejmdw/workspace/websites/next-commerce-test/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/Users/thejmdw/workspace/websites/next-commerce-test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useCallback } from 'react';\nimport debounce from 'lodash.debounce';\nimport { ValidationError } from '@commerce/utils/errors';\nimport useUpdateItem from '@commerce/cart/use-update-item';\nimport useCart from './use-cart';\nimport { handler as removeItemHandler } from './use-remove-item';\nimport { checkoutToCart } from '../utils';\nimport { getCheckoutId, checkoutLineItemUpdateMutation } from '../utils';\nexport default useUpdateItem;\nexport var handler = {\n  fetchOptions: {\n    query: checkoutLineItemUpdateMutation\n  },\n  fetcher: function fetcher(_ref) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _ref$input, itemId, item, options, fetch, _yield$fetch, checkoutLineItemsUpdate;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _ref$input = _ref.input, itemId = _ref$input.itemId, item = _ref$input.item, options = _ref.options, fetch = _ref.fetch;\n\n              if (!Number.isInteger(item.quantity)) {\n                _context.next = 6;\n                break;\n              }\n\n              if (!(item.quantity < 1)) {\n                _context.next = 4;\n                break;\n              }\n\n              return _context.abrupt(\"return\", removeItemHandler.fetcher({\n                options: removeItemHandler.fetchOptions,\n                input: {\n                  itemId: itemId\n                },\n                fetch: fetch\n              }));\n\n            case 4:\n              _context.next = 8;\n              break;\n\n            case 6:\n              if (!item.quantity) {\n                _context.next = 8;\n                break;\n              }\n\n              throw new ValidationError({\n                message: 'The item quantity has to be a valid integer'\n              });\n\n            case 8:\n              _context.next = 10;\n              return fetch(_objectSpread(_objectSpread({}, options), {}, {\n                variables: {\n                  checkoutId: getCheckoutId(),\n                  lineItems: [{\n                    id: itemId,\n                    quantity: item.quantity\n                  }]\n                }\n              }));\n\n            case 10:\n              _yield$fetch = _context.sent;\n              checkoutLineItemsUpdate = _yield$fetch.checkoutLineItemsUpdate;\n              return _context.abrupt(\"return\", checkoutToCart(checkoutLineItemsUpdate));\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  useHook: function useHook(_ref2) {\n    var _s = $RefreshSig$();\n\n    var fetch = _ref2.fetch;\n    return _s(function () {\n      var _ctx$wait;\n\n      _s();\n\n      var ctx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var item = ctx.item;\n\n      var _ref3 = useCart(),\n          mutate = _ref3.mutate;\n\n      return useCallback(debounce( /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(input) {\n          var _input$id, _input$productId, _input$productId2;\n\n          var itemId, productId, variantId, data;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  itemId = (_input$id = input.id) !== null && _input$id !== void 0 ? _input$id : item === null || item === void 0 ? void 0 : item.id;\n                  productId = (_input$productId = input.productId) !== null && _input$productId !== void 0 ? _input$productId : item === null || item === void 0 ? void 0 : item.productId;\n                  variantId = (_input$productId2 = input.productId) !== null && _input$productId2 !== void 0 ? _input$productId2 : item === null || item === void 0 ? void 0 : item.variantId;\n\n                  if (!(!itemId || !productId || !variantId)) {\n                    _context2.next = 5;\n                    break;\n                  }\n\n                  throw new ValidationError({\n                    message: 'Invalid input used for this operation'\n                  });\n\n                case 5:\n                  _context2.next = 7;\n                  return fetch({\n                    input: {\n                      item: {\n                        productId: productId,\n                        variantId: variantId,\n                        quantity: input.quantity\n                      },\n                      itemId: itemId\n                    }\n                  });\n\n                case 7:\n                  data = _context2.sent;\n                  _context2.next = 10;\n                  return mutate(data, false);\n\n                case 10:\n                  return _context2.abrupt(\"return\", data);\n\n                case 11:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x) {\n          return _ref4.apply(this, arguments);\n        };\n      }(), (_ctx$wait = ctx.wait) !== null && _ctx$wait !== void 0 ? _ctx$wait : 500), [fetch, mutate]);\n    }, \"m5RbutujOFP5+3j+3MJwoig+6f8=\", false, function () {\n      return [useCart];\n    });\n  }\n};","map":{"version":3,"sources":["/Users/thejmdw/workspace/websites/next-commerce-test/framework/shopify/cart/use-update-item.tsx"],"names":["useCallback","debounce","ValidationError","useUpdateItem","useCart","handler","removeItemHandler","checkoutToCart","getCheckoutId","checkoutLineItemUpdateMutation","fetchOptions","query","fetcher","input","itemId","item","options","fetch","Number","isInteger","quantity","message","variables","checkoutId","lineItems","id","checkoutLineItemsUpdate","useHook","ctx","mutate","productId","variantId","data","wait"],"mappings":"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","sourcesContent":["import { useCallback } from 'react'\nimport debounce from 'lodash.debounce'\nimport type {\n  HookFetcherContext,\n  MutationHookContext,\n} from '@commerce/utils/types'\nimport { ValidationError } from '@commerce/utils/errors'\nimport useUpdateItem, {\n  UpdateItemInput as UpdateItemInputBase,\n  UseUpdateItem,\n} from '@commerce/cart/use-update-item'\n\nimport useCart from './use-cart'\nimport { handler as removeItemHandler } from './use-remove-item'\nimport type { Cart, LineItem, UpdateCartItemBody } from '../types'\nimport { checkoutToCart } from '../utils'\nimport { getCheckoutId, checkoutLineItemUpdateMutation } from '../utils'\nimport { Mutation, MutationCheckoutLineItemsUpdateArgs } from '../schema'\n\nexport type UpdateItemInput<T = any> = T extends LineItem\n  ? Partial<UpdateItemInputBase<LineItem>>\n  : UpdateItemInputBase<LineItem>\n\nexport default useUpdateItem as UseUpdateItem<typeof handler>\n\nexport const handler = {\n  fetchOptions: {\n    query: checkoutLineItemUpdateMutation,\n  },\n  async fetcher({\n    input: { itemId, item },\n    options,\n    fetch,\n  }: HookFetcherContext<UpdateCartItemBody>) {\n    if (Number.isInteger(item.quantity)) {\n      // Also allow the update hook to remove an item if the quantity is lower than 1\n      if (item.quantity! < 1) {\n        return removeItemHandler.fetcher({\n          options: removeItemHandler.fetchOptions,\n          input: { itemId },\n          fetch,\n        })\n      }\n    } else if (item.quantity) {\n      throw new ValidationError({\n        message: 'The item quantity has to be a valid integer',\n      })\n    }\n    const { checkoutLineItemsUpdate } = await fetch<\n      Mutation,\n      MutationCheckoutLineItemsUpdateArgs\n    >({\n      ...options,\n      variables: {\n        checkoutId: getCheckoutId(),\n        lineItems: [\n          {\n            id: itemId,\n            quantity: item.quantity,\n          },\n        ],\n      },\n    })\n\n    return checkoutToCart(checkoutLineItemsUpdate)\n  },\n  useHook: ({\n    fetch,\n  }: MutationHookContext<Cart | null, UpdateCartItemBody>) => <\n    T extends LineItem | undefined = undefined\n  >(\n    ctx: {\n      item?: T\n      wait?: number\n    } = {}\n  ) => {\n    const { item } = ctx\n    const { mutate } = useCart() as any\n\n    return useCallback(\n      debounce(async (input: UpdateItemInput<T>) => {\n        const itemId = input.id ?? item?.id\n        const productId = input.productId ?? item?.productId\n        const variantId = input.productId ?? item?.variantId\n        if (!itemId || !productId || !variantId) {\n          throw new ValidationError({\n            message: 'Invalid input used for this operation',\n          })\n        }\n\n        const data = await fetch({\n          input: {\n            item: {\n              productId,\n              variantId,\n              quantity: input.quantity,\n            },\n            itemId,\n          },\n        })\n        await mutate(data, false)\n        return data\n      }, ctx.wait ?? 500),\n      [fetch, mutate]\n    )\n  },\n}\n"]},"metadata":{},"sourceType":"module"}