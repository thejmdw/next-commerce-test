{"ast":null,"code":"import { FetcherError } from '@commerce/utils/errors';\nexport function getError(errors, status) {\n  var _errors;\n\n  errors = (_errors = errors) !== null && _errors !== void 0 ? _errors : [{\n    message: 'Failed to fetch Shopify API'\n  }];\n  return new FetcherError({\n    errors,\n    status\n  });\n}\nexport async function getAsyncError(res) {\n  const data = await res.json();\n  return getError(data.errors, res.status);\n}\n\nconst handleFetchResponse = async res => {\n  if (res.ok) {\n    const {\n      data,\n      errors\n    } = await res.json();\n\n    if (errors && errors.length) {\n      throw getError(errors, res.status);\n    }\n\n    return data;\n  }\n\n  throw await getAsyncError(res);\n};\n\nexport default handleFetchResponse;","map":{"version":3,"sources":["/Users/thejmdw/workspace/websites/next-commerce-test/framework/shopify/utils/handle-fetch-response.ts"],"names":["FetcherError","getError","errors","status","message","getAsyncError","res","data","json","handleFetchResponse","ok","length"],"mappings":"AAAA,SAASA,YAAT,QAA6B,wBAA7B;AAEA,OAAO,SAASC,QAAT,CAAkBC,MAAlB,EAAiCC,MAAjC,EAAiD;AAAA;;AACtDD,EAAAA,MAAM,cAAGA,MAAH,6CAAa,CAAC;AAAEE,IAAAA,OAAO,EAAE;AAAX,GAAD,CAAnB;AACA,SAAO,IAAIJ,YAAJ,CAAiB;AAAEE,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAjB,CAAP;AACD;AAED,OAAO,eAAeE,aAAf,CAA6BC,GAA7B,EAA4C;AACjD,QAAMC,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAnB;AACA,SAAOP,QAAQ,CAACM,IAAI,CAACL,MAAN,EAAcI,GAAG,CAACH,MAAlB,CAAf;AACD;;AAED,MAAMM,mBAAmB,GAAG,MAAOH,GAAP,IAAyB;AACnD,MAAIA,GAAG,CAACI,EAAR,EAAY;AACV,UAAM;AAAEH,MAAAA,IAAF;AAAQL,MAAAA;AAAR,QAAmB,MAAMI,GAAG,CAACE,IAAJ,EAA/B;;AAEA,QAAIN,MAAM,IAAIA,MAAM,CAACS,MAArB,EAA6B;AAC3B,YAAMV,QAAQ,CAACC,MAAD,EAASI,GAAG,CAACH,MAAb,CAAd;AACD;;AAED,WAAOI,IAAP;AACD;;AAED,QAAM,MAAMF,aAAa,CAACC,GAAD,CAAzB;AACD,CAZD;;AAcA,eAAeG,mBAAf","sourcesContent":["import { FetcherError } from '@commerce/utils/errors'\n\nexport function getError(errors: any[], status: number) {\n  errors = errors ?? [{ message: 'Failed to fetch Shopify API' }]\n  return new FetcherError({ errors, status })\n}\n\nexport async function getAsyncError(res: Response) {\n  const data = await res.json()\n  return getError(data.errors, res.status)\n}\n\nconst handleFetchResponse = async (res: Response) => {\n  if (res.ok) {\n    const { data, errors } = await res.json()\n\n    if (errors && errors.length) {\n      throw getError(errors, res.status)\n    }\n\n    return data\n  }\n\n  throw await getAsyncError(res)\n}\n\nexport default handleFetchResponse\n"]},"metadata":{},"sourceType":"module"}