{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport getSlug from './get-slug';\nexport function useSearchMeta(asPath) {\n  _s();\n\n  var _useState = useState('/search'),\n      pathname = _useState[0],\n      setPathname = _useState[1];\n\n  var _useState2 = useState(),\n      category = _useState2[0],\n      setCategory = _useState2[1];\n\n  var _useState3 = useState(),\n      brand = _useState3[0],\n      setBrand = _useState3[1];\n\n  useEffect(function () {\n    // Only access asPath after hydration to avoid a server mismatch\n    var path = asPath.split('?')[0];\n    var parts = path.split('/');\n    var c = parts[2];\n    var b = parts[3];\n\n    if (c === 'designers') {\n      c = parts[4];\n    }\n\n    setPathname(path);\n    if (c !== category) setCategory(c);\n    if (b !== brand) setBrand(b);\n  }, [asPath]);\n  return {\n    pathname: pathname,\n    category: category,\n    brand: brand\n  };\n} // Removes empty query parameters from the query object\n\n_s(useSearchMeta, \"pJkyiA1Kx0LqQ2i73aHEFH8gUNo=\");\n\nexport var filterQuery = function filterQuery(query) {\n  return Object.keys(query).reduce(function (obj, key) {\n    var _query$key;\n\n    if ((_query$key = query[key]) !== null && _query$key !== void 0 && _query$key.length) {\n      obj[key] = query[key];\n    }\n\n    return obj;\n  }, {});\n};\nexport var getCategoryPath = function getCategoryPath(path, brand) {\n  var category = getSlug(path);\n  return \"/search\".concat(brand ? \"/designers/\".concat(brand) : '').concat(category ? \"/\".concat(category) : '');\n};\nexport var getDesignerPath = function getDesignerPath(path, category) {\n  var designer = getSlug(path).replace(/^brands/, 'designers');\n  return \"/search\".concat(designer ? \"/\".concat(designer) : '').concat(category ? \"/\".concat(category) : '');\n};","map":{"version":3,"sources":["/Users/thejmdw/workspace/websites/next-commerce-test/lib/search.tsx"],"names":["useEffect","useState","getSlug","useSearchMeta","asPath","pathname","setPathname","category","setCategory","brand","setBrand","path","split","parts","c","b","filterQuery","query","Object","keys","reduce","obj","key","length","getCategoryPath","getDesignerPath","designer","replace"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,OAAP,MAAoB,YAApB;AAEA,OAAO,SAASC,aAAT,CAAuBC,MAAvB,EAAuC;AAAA;;AAAA,kBACZH,QAAQ,CAAS,SAAT,CADI;AAAA,MACrCI,QADqC;AAAA,MAC3BC,WAD2B;;AAAA,mBAEZL,QAAQ,EAFI;AAAA,MAErCM,QAFqC;AAAA,MAE3BC,WAF2B;;AAAA,mBAGlBP,QAAQ,EAHU;AAAA,MAGrCQ,KAHqC;AAAA,MAG9BC,QAH8B;;AAK5CV,EAAAA,SAAS,CAAC,YAAM;AACd;AACA,QAAMW,IAAI,GAAGP,MAAM,CAACQ,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAb;AACA,QAAMC,KAAK,GAAGF,IAAI,CAACC,KAAL,CAAW,GAAX,CAAd;AAEA,QAAIE,CAAC,GAAGD,KAAK,CAAC,CAAD,CAAb;AACA,QAAIE,CAAC,GAAGF,KAAK,CAAC,CAAD,CAAb;;AAEA,QAAIC,CAAC,KAAK,WAAV,EAAuB;AACrBA,MAAAA,CAAC,GAAGD,KAAK,CAAC,CAAD,CAAT;AACD;;AAEDP,IAAAA,WAAW,CAACK,IAAD,CAAX;AACA,QAAIG,CAAC,KAAKP,QAAV,EAAoBC,WAAW,CAACM,CAAD,CAAX;AACpB,QAAIC,CAAC,KAAKN,KAAV,EAAiBC,QAAQ,CAACK,CAAD,CAAR;AAClB,GAfQ,EAeN,CAACX,MAAD,CAfM,CAAT;AAiBA,SAAO;AAAEC,IAAAA,QAAQ,EAARA,QAAF;AAAYE,IAAAA,QAAQ,EAARA,QAAZ;AAAsBE,IAAAA,KAAK,EAALA;AAAtB,GAAP;AACD,C,CAED;;GAzBgBN,a;;AA0BhB,OAAO,IAAMa,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD;AAAA,SACzBC,MAAM,CAACC,IAAP,CAAYF,KAAZ,EAAmBG,MAAnB,CAA+B,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA;;AAC3C,sBAAIL,KAAK,CAACK,GAAD,CAAT,uCAAI,WAAYC,MAAhB,EAAwB;AACtBF,MAAAA,GAAG,CAACC,GAAD,CAAH,GAAWL,KAAK,CAACK,GAAD,CAAhB;AACD;;AACD,WAAOD,GAAP;AACD,GALD,EAKG,EALH,CADyB;AAAA,CAApB;AAQP,OAAO,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,CAACb,IAAD,EAAeF,KAAf,EAAkC;AAC/D,MAAMF,QAAQ,GAAGL,OAAO,CAACS,IAAD,CAAxB;AAEA,0BAAiBF,KAAK,wBAAiBA,KAAjB,IAA2B,EAAjD,SACEF,QAAQ,cAAOA,QAAP,IAAoB,EAD9B;AAGD,CANM;AAQP,OAAO,IAAMkB,eAAe,GAAG,SAAlBA,eAAkB,CAACd,IAAD,EAAeJ,QAAf,EAAqC;AAClE,MAAMmB,QAAQ,GAAGxB,OAAO,CAACS,IAAD,CAAP,CAAcgB,OAAd,CAAsB,SAAtB,EAAiC,WAAjC,CAAjB;AAEA,0BAAiBD,QAAQ,cAAOA,QAAP,IAAoB,EAA7C,SACEnB,QAAQ,cAAOA,QAAP,IAAoB,EAD9B;AAGD,CANM","sourcesContent":["import { useEffect, useState } from 'react'\nimport getSlug from './get-slug'\n\nexport function useSearchMeta(asPath: string) {\n  const [pathname, setPathname] = useState<string>('/search')\n  const [category, setCategory] = useState<string | undefined>()\n  const [brand, setBrand] = useState<string | undefined>()\n\n  useEffect(() => {\n    // Only access asPath after hydration to avoid a server mismatch\n    const path = asPath.split('?')[0]\n    const parts = path.split('/')\n\n    let c = parts[2]\n    let b = parts[3]\n\n    if (c === 'designers') {\n      c = parts[4]\n    }\n\n    setPathname(path)\n    if (c !== category) setCategory(c)\n    if (b !== brand) setBrand(b)\n  }, [asPath])\n\n  return { pathname, category, brand }\n}\n\n// Removes empty query parameters from the query object\nexport const filterQuery = (query: any) =>\n  Object.keys(query).reduce<any>((obj, key) => {\n    if (query[key]?.length) {\n      obj[key] = query[key]\n    }\n    return obj\n  }, {})\n\nexport const getCategoryPath = (path: string, brand?: string) => {\n  const category = getSlug(path)\n\n  return `/search${brand ? `/designers/${brand}` : ''}${\n    category ? `/${category}` : ''\n  }`\n}\n\nexport const getDesignerPath = (path: string, category?: string) => {\n  const designer = getSlug(path).replace(/^brands/, 'designers')\n\n  return `/search${designer ? `/${designer}` : ''}${\n    category ? `/${category}` : ''\n  }`\n}\n"]},"metadata":{},"sourceType":"module"}