{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { API_URL, API_TOKEN, SHOPIFY_CHECKOUT_ID_COOKIE, SHOPIFY_CUSTOMER_TOKEN_COOKIE } from '../const';\n\nif (!API_URL) {\n  throw new Error(`The environment variable NEXT_PUBLIC_SHOPIFY_STORE_DOMAIN is missing and it's required to access your store`);\n}\n\nif (!API_TOKEN) {\n  throw new Error(`The environment variable NEXT_PUBLIC_SHOPIFY_STOREFRONT_ACCESS_TOKEN is missing and it's required to access your store`);\n}\n\nimport fetchGraphqlApi from './utils/fetch-graphql-api';\nexport class Config {\n  constructor(config) {\n    _defineProperty(this, \"config\", void 0);\n\n    this.config = config;\n  }\n\n  getConfig(userConfig = {}) {\n    return Object.entries(userConfig).reduce((cfg, [key, value]) => Object.assign(cfg, {\n      [key]: value\n    }), _objectSpread({}, this.config));\n  }\n\n  setConfig(newConfig) {\n    Object.assign(this.config, newConfig);\n  }\n\n}\nconst config = new Config({\n  locale: 'en-US',\n  commerceUrl: API_URL,\n  apiToken: API_TOKEN,\n  cartCookie: SHOPIFY_CHECKOUT_ID_COOKIE,\n  cartCookieMaxAge: 60 * 60 * 24 * 30,\n  fetch: fetchGraphqlApi,\n  customerCookie: SHOPIFY_CUSTOMER_TOKEN_COOKIE\n});\nexport function getConfig(userConfig) {\n  return config.getConfig(userConfig);\n}\nexport function setConfig(newConfig) {\n  return config.setConfig(newConfig);\n}","map":{"version":3,"sources":["/Users/thejmdw/workspace/websites/next-commerce-test/framework/shopify/api/index.ts"],"names":["API_URL","API_TOKEN","SHOPIFY_CHECKOUT_ID_COOKIE","SHOPIFY_CUSTOMER_TOKEN_COOKIE","Error","fetchGraphqlApi","Config","constructor","config","getConfig","userConfig","Object","entries","reduce","cfg","key","value","assign","setConfig","newConfig","locale","commerceUrl","apiToken","cartCookie","cartCookieMaxAge","fetch","customerCookie"],"mappings":";;;;;;AAEA,SACEA,OADF,EAEEC,SAFF,EAGEC,0BAHF,EAIEC,6BAJF,QAKO,UALP;;AAOA,IAAI,CAACH,OAAL,EAAc;AACZ,QAAM,IAAII,KAAJ,CACH,6GADG,CAAN;AAGD;;AAED,IAAI,CAACH,SAAL,EAAgB;AACd,QAAM,IAAIG,KAAJ,CACH,wHADG,CAAN;AAGD;;AAED,OAAOC,eAAP,MAA4B,2BAA5B;AAIA,OAAO,MAAMC,MAAN,CAAa;AAGlBC,EAAAA,WAAW,CAACC,MAAD,EAAwB;AAAA;;AACjC,SAAKA,MAAL,GAAcA,MAAd;AACD;;AAEDC,EAAAA,SAAS,CAACC,UAAkC,GAAG,EAAtC,EAA0C;AACjD,WAAOC,MAAM,CAACC,OAAP,CAAeF,UAAf,EAA2BG,MAA3B,CACL,CAACC,GAAD,EAAM,CAACC,GAAD,EAAMC,KAAN,CAAN,KAAuBL,MAAM,CAACM,MAAP,CAAcH,GAAd,EAAmB;AAAE,OAACC,GAAD,GAAOC;AAAT,KAAnB,CADlB,oBAEA,KAAKR,MAFL,EAAP;AAID;;AAEDU,EAAAA,SAAS,CAACC,SAAD,EAAoC;AAC3CR,IAAAA,MAAM,CAACM,MAAP,CAAc,KAAKT,MAAnB,EAA2BW,SAA3B;AACD;;AAhBiB;AAmBpB,MAAMX,MAAM,GAAG,IAAIF,MAAJ,CAAW;AACxBc,EAAAA,MAAM,EAAE,OADgB;AAExBC,EAAAA,WAAW,EAAErB,OAFW;AAGxBsB,EAAAA,QAAQ,EAAErB,SAHc;AAIxBsB,EAAAA,UAAU,EAAErB,0BAJY;AAKxBsB,EAAAA,gBAAgB,EAAE,KAAK,EAAL,GAAU,EAAV,GAAe,EALT;AAMxBC,EAAAA,KAAK,EAAEpB,eANiB;AAOxBqB,EAAAA,cAAc,EAAEvB;AAPQ,CAAX,CAAf;AAUA,OAAO,SAASM,SAAT,CAAmBC,UAAnB,EAAwD;AAC7D,SAAOF,MAAM,CAACC,SAAP,CAAiBC,UAAjB,CAAP;AACD;AAED,OAAO,SAASQ,SAAT,CAAmBC,SAAnB,EAAsD;AAC3D,SAAOX,MAAM,CAACU,SAAP,CAAiBC,SAAjB,CAAP;AACD","sourcesContent":["import type { CommerceAPIConfig } from '@commerce/api'\n\nimport {\n  API_URL,\n  API_TOKEN,\n  SHOPIFY_CHECKOUT_ID_COOKIE,\n  SHOPIFY_CUSTOMER_TOKEN_COOKIE,\n} from '../const'\n\nif (!API_URL) {\n  throw new Error(\n    `The environment variable NEXT_PUBLIC_SHOPIFY_STORE_DOMAIN is missing and it's required to access your store`\n  )\n}\n\nif (!API_TOKEN) {\n  throw new Error(\n    `The environment variable NEXT_PUBLIC_SHOPIFY_STOREFRONT_ACCESS_TOKEN is missing and it's required to access your store`\n  )\n}\n\nimport fetchGraphqlApi from './utils/fetch-graphql-api'\n\nexport interface ShopifyConfig extends CommerceAPIConfig {}\n\nexport class Config {\n  private config: ShopifyConfig\n\n  constructor(config: ShopifyConfig) {\n    this.config = config\n  }\n\n  getConfig(userConfig: Partial<ShopifyConfig> = {}) {\n    return Object.entries(userConfig).reduce<ShopifyConfig>(\n      (cfg, [key, value]) => Object.assign(cfg, { [key]: value }),\n      { ...this.config }\n    )\n  }\n\n  setConfig(newConfig: Partial<ShopifyConfig>) {\n    Object.assign(this.config, newConfig)\n  }\n}\n\nconst config = new Config({\n  locale: 'en-US',\n  commerceUrl: API_URL,\n  apiToken: API_TOKEN!,\n  cartCookie: SHOPIFY_CHECKOUT_ID_COOKIE,\n  cartCookieMaxAge: 60 * 60 * 24 * 30,\n  fetch: fetchGraphqlApi,\n  customerCookie: SHOPIFY_CUSTOMER_TOKEN_COOKIE,\n})\n\nexport function getConfig(userConfig?: Partial<ShopifyConfig>) {\n  return config.getConfig(userConfig)\n}\n\nexport function setConfig(newConfig: Partial<ShopifyConfig>) {\n  return config.setConfig(newConfig)\n}\n"]},"metadata":{},"sourceType":"module"}