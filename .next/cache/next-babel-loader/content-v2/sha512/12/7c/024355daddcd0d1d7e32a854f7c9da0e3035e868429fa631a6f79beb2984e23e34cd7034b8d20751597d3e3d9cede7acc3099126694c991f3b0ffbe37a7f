{"ast":null,"code":"import getSiteCollectionsQuery from './queries/get-all-collections-query';\n\nconst getCategories = async config => {\n  var _data$collections$edg, _data$collections, _data$collections$edg2;\n\n  const {\n    data\n  } = await config.fetch(getSiteCollectionsQuery, {\n    variables: {\n      first: 250\n    }\n  });\n  return (_data$collections$edg = (_data$collections = data.collections) === null || _data$collections === void 0 ? void 0 : (_data$collections$edg2 = _data$collections.edges) === null || _data$collections$edg2 === void 0 ? void 0 : _data$collections$edg2.map(({\n    node: {\n      id: entityId,\n      title: name,\n      handle\n    }\n  }) => ({\n    entityId,\n    name,\n    path: `/${handle}`\n  }))) !== null && _data$collections$edg !== void 0 ? _data$collections$edg : [];\n};\n\nexport default getCategories;","map":{"version":3,"sources":["/Users/thejmdw/workspace/websites/next-commerce-test/framework/shopify/utils/get-categories.ts"],"names":["getSiteCollectionsQuery","getCategories","config","data","fetch","variables","first","collections","edges","map","node","id","entityId","title","name","handle","path"],"mappings":"AAEA,OAAOA,uBAAP,MAAoC,qCAApC;;AAQA,MAAMC,aAAa,GAAG,MAAOC,MAAP,IAAsD;AAAA;;AAC1E,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMD,MAAM,CAACE,KAAP,CAAaJ,uBAAb,EAAsC;AAC3DK,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAE;AADE;AADgD,GAAtC,CAAvB;AAMA,uDACEH,IAAI,CAACI,WADP,gFACE,kBAAkBC,KADpB,2DACE,uBAAyBC,GAAzB,CACE,CAAC;AAAEC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,EAAE,EAAEC,QAAN;AAAgBC,MAAAA,KAAK,EAAEC,IAAvB;AAA6BC,MAAAA;AAA7B;AAAR,GAAD,MAAsE;AACpEH,IAAAA,QADoE;AAEpEE,IAAAA,IAFoE;AAGpEE,IAAAA,IAAI,EAAG,IAAGD,MAAO;AAHmD,GAAtE,CADF,CADF,yEAOO,EAPP;AASD,CAhBD;;AAkBA,eAAed,aAAf","sourcesContent":["import { ShopifyConfig } from '../api'\nimport { CollectionEdge } from '../schema'\nimport getSiteCollectionsQuery from './queries/get-all-collections-query'\n\nexport type Category = {\n  entityId: string\n  name: string\n  path: string\n}\n\nconst getCategories = async (config: ShopifyConfig): Promise<Category[]> => {\n  const { data } = await config.fetch(getSiteCollectionsQuery, {\n    variables: {\n      first: 250,\n    },\n  })\n\n  return (\n    data.collections?.edges?.map(\n      ({ node: { id: entityId, title: name, handle } }: CollectionEdge) => ({\n        entityId,\n        name,\n        path: `/${handle}`,\n      })\n    ) ?? []\n  )\n}\n\nexport default getCategories\n"]},"metadata":{},"sourceType":"module"}