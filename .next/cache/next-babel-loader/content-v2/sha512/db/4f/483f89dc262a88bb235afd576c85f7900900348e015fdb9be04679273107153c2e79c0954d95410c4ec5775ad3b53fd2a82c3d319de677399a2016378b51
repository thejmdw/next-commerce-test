{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useHook, useMutationHook } from '../utils/use-hook';\nimport { mutationFetcher } from '../utils/default-fetcher';\nexport const fetcher = mutationFetcher;\n\nconst fn = provider => {\n  var _provider$cart;\n\n  return (_provider$cart = provider.cart) === null || _provider$cart === void 0 ? void 0 : _provider$cart.useAddItem;\n};\n\nconst useAddItem = (...args) => {\n  const hook = useHook(fn);\n  return useMutationHook(_objectSpread({\n    fetcher\n  }, hook))(...args);\n};\n\nexport default useAddItem;","map":{"version":3,"sources":["/Users/thejmdw/workspace/websites/next-commerce-test/framework/commerce/cart/use-add-item.tsx"],"names":["useHook","useMutationHook","mutationFetcher","fetcher","fn","provider","cart","useAddItem","args","hook"],"mappings":";;;;;;AAAA,SAASA,OAAT,EAAkBC,eAAlB,QAAyC,mBAAzC;AACA,SAASC,eAAT,QAAgC,0BAAhC;AASA,OAAO,MAAMC,OAGZ,GAAGD,eAHG;;AAKP,MAAME,EAAE,GAAIC,QAAD;AAAA;;AAAA,2BAAwBA,QAAQ,CAACC,IAAjC,mDAAwB,eAAeC,UAAvC;AAAA,CAAX;;AAEA,MAAMA,UAAsB,GAAG,CAAC,GAAGC,IAAJ,KAAa;AAC1C,QAAMC,IAAI,GAAGT,OAAO,CAACI,EAAD,CAApB;AACA,SAAOH,eAAe;AAAGE,IAAAA;AAAH,KAAeM,IAAf,EAAf,CAAsC,GAAGD,IAAzC,CAAP;AACD,CAHD;;AAKA,eAAeD,UAAf","sourcesContent":["import { useHook, useMutationHook } from '../utils/use-hook'\nimport { mutationFetcher } from '../utils/default-fetcher'\nimport type { HookFetcherFn, MutationHook } from '../utils/types'\nimport type { Cart, CartItemBody, AddCartItemBody } from '../types'\nimport type { Provider } from '..'\n\nexport type UseAddItem<\n  H extends MutationHook<any, any, any> = MutationHook<Cart, {}, CartItemBody>\n> = ReturnType<H['useHook']>\n\nexport const fetcher: HookFetcherFn<\n  Cart,\n  AddCartItemBody<CartItemBody>\n> = mutationFetcher\n\nconst fn = (provider: Provider) => provider.cart?.useAddItem!\n\nconst useAddItem: UseAddItem = (...args) => {\n  const hook = useHook(fn)\n  return useMutationHook({ fetcher, ...hook })(...args)\n}\n\nexport default useAddItem\n"]},"metadata":{},"sourceType":"module"}