{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst fetchAllProducts = async ({\n  config,\n  query,\n  variables,\n  acc = [],\n  cursor\n}) => {\n  var _data$products$edges, _data$products, _data$products2, _data$products2$pageI;\n\n  const {\n    data\n  } = await config.fetch(query, {\n    variables: _objectSpread(_objectSpread({}, variables), {}, {\n      cursor\n    })\n  });\n  const edges = (_data$products$edges = (_data$products = data.products) === null || _data$products === void 0 ? void 0 : _data$products.edges) !== null && _data$products$edges !== void 0 ? _data$products$edges : [];\n  const hasNextPage = (_data$products2 = data.products) === null || _data$products2 === void 0 ? void 0 : (_data$products2$pageI = _data$products2.pageInfo) === null || _data$products2$pageI === void 0 ? void 0 : _data$products2$pageI.hasNextPage;\n  acc = acc.concat(edges);\n\n  if (hasNextPage) {\n    var _edges$pop;\n\n    const cursor = (_edges$pop = edges.pop()) === null || _edges$pop === void 0 ? void 0 : _edges$pop.cursor;\n\n    if (cursor) {\n      return fetchAllProducts({\n        config,\n        query,\n        variables,\n        acc,\n        cursor\n      });\n    }\n  }\n\n  return acc;\n};\n\nexport default fetchAllProducts;","map":{"version":3,"sources":["/Users/thejmdw/workspace/websites/next-commerce-test/framework/shopify/api/utils/fetch-all-products.ts"],"names":["fetchAllProducts","config","query","variables","acc","cursor","data","fetch","edges","products","hasNextPage","pageInfo","concat","pop"],"mappings":";;;;;;AAGA,MAAMA,gBAAgB,GAAG,OAAO;AAC9BC,EAAAA,MAD8B;AAE9BC,EAAAA,KAF8B;AAG9BC,EAAAA,SAH8B;AAI9BC,EAAAA,GAAG,GAAG,EAJwB;AAK9BC,EAAAA;AAL8B,CAAP,KAYK;AAAA;;AAC5B,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAML,MAAM,CAACM,KAAP,CAAaL,KAAb,EAAoB;AACzCC,IAAAA,SAAS,kCAAOA,SAAP;AAAkBE,MAAAA;AAAlB;AADgC,GAApB,CAAvB;AAIA,QAAMG,KAAoB,6CAAGF,IAAI,CAACG,QAAR,mDAAG,eAAeD,KAAlB,uEAA2B,EAArD;AACA,QAAME,WAAW,sBAAGJ,IAAI,CAACG,QAAR,6EAAG,gBAAeE,QAAlB,0DAAG,sBAAyBD,WAA7C;AACAN,EAAAA,GAAG,GAAGA,GAAG,CAACQ,MAAJ,CAAWJ,KAAX,CAAN;;AAEA,MAAIE,WAAJ,EAAiB;AAAA;;AACf,UAAML,MAAM,iBAAGG,KAAK,CAACK,GAAN,EAAH,+CAAG,WAAaR,MAA5B;;AACA,QAAIA,MAAJ,EAAY;AACV,aAAOL,gBAAgB,CAAC;AACtBC,QAAAA,MADsB;AAEtBC,QAAAA,KAFsB;AAGtBC,QAAAA,SAHsB;AAItBC,QAAAA,GAJsB;AAKtBC,QAAAA;AALsB,OAAD,CAAvB;AAOD;AACF;;AAED,SAAOD,GAAP;AACD,CAnCD;;AAqCA,eAAeJ,gBAAf","sourcesContent":["import { ProductEdge } from '../../schema'\nimport { ShopifyConfig } from '..'\n\nconst fetchAllProducts = async ({\n  config,\n  query,\n  variables,\n  acc = [],\n  cursor,\n}: {\n  config: ShopifyConfig\n  query: string\n  acc?: ProductEdge[]\n  variables?: any\n  cursor?: string\n}): Promise<ProductEdge[]> => {\n  const { data } = await config.fetch(query, {\n    variables: { ...variables, cursor },\n  })\n\n  const edges: ProductEdge[] = data.products?.edges ?? []\n  const hasNextPage = data.products?.pageInfo?.hasNextPage\n  acc = acc.concat(edges)\n\n  if (hasNextPage) {\n    const cursor = edges.pop()?.cursor\n    if (cursor) {\n      return fetchAllProducts({\n        config,\n        query,\n        variables,\n        acc,\n        cursor,\n      })\n    }\n  }\n\n  return acc\n}\n\nexport default fetchAllProducts\n"]},"metadata":{},"sourceType":"module"}