{"ast":null,"code":"import { useMemo } from 'react';\nimport { useCommerce } from '..';\nexport function formatPrice({\n  amount,\n  currencyCode,\n  locale\n}) {\n  const formatCurrency = new Intl.NumberFormat(locale, {\n    style: 'currency',\n    currency: currencyCode\n  });\n  return formatCurrency.format(amount);\n}\nexport function formatVariantPrice({\n  amount,\n  baseAmount,\n  currencyCode,\n  locale\n}) {\n  const hasDiscount = baseAmount > amount;\n  const formatDiscount = new Intl.NumberFormat(locale, {\n    style: 'percent'\n  });\n  const discount = hasDiscount ? formatDiscount.format((baseAmount - amount) / baseAmount) : null;\n  const price = formatPrice({\n    amount,\n    currencyCode,\n    locale\n  });\n  const basePrice = hasDiscount ? formatPrice({\n    amount: baseAmount,\n    currencyCode,\n    locale\n  }) : null;\n  return {\n    price,\n    basePrice,\n    discount\n  };\n}\nexport default function usePrice(data) {\n  const {\n    amount,\n    baseAmount,\n    currencyCode\n  } = data !== null && data !== void 0 ? data : {};\n  const {\n    locale\n  } = useCommerce();\n  const value = useMemo(() => {\n    if (typeof amount !== 'number' || !currencyCode) return '';\n    return baseAmount ? formatVariantPrice({\n      amount,\n      baseAmount,\n      currencyCode,\n      locale\n    }) : formatPrice({\n      amount,\n      currencyCode,\n      locale\n    });\n  }, [amount, baseAmount, currencyCode]);\n  return typeof value === 'string' ? {\n    price: value\n  } : value;\n}","map":{"version":3,"sources":["/Users/thejmdw/workspace/websites/next-commerce-test/framework/commerce/product/use-price.tsx"],"names":["useMemo","useCommerce","formatPrice","amount","currencyCode","locale","formatCurrency","Intl","NumberFormat","style","currency","format","formatVariantPrice","baseAmount","hasDiscount","formatDiscount","discount","price","basePrice","usePrice","data","value"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,WAAT,QAA4B,IAA5B;AAEA,OAAO,SAASC,WAAT,CAAqB;AAC1BC,EAAAA,MAD0B;AAE1BC,EAAAA,YAF0B;AAG1BC,EAAAA;AAH0B,CAArB,EAQJ;AACD,QAAMC,cAAc,GAAG,IAAIC,IAAI,CAACC,YAAT,CAAsBH,MAAtB,EAA8B;AACnDI,IAAAA,KAAK,EAAE,UAD4C;AAEnDC,IAAAA,QAAQ,EAAEN;AAFyC,GAA9B,CAAvB;AAKA,SAAOE,cAAc,CAACK,MAAf,CAAsBR,MAAtB,CAAP;AACD;AAED,OAAO,SAASS,kBAAT,CAA4B;AACjCT,EAAAA,MADiC;AAEjCU,EAAAA,UAFiC;AAGjCT,EAAAA,YAHiC;AAIjCC,EAAAA;AAJiC,CAA5B,EAUJ;AACD,QAAMS,WAAW,GAAGD,UAAU,GAAGV,MAAjC;AACA,QAAMY,cAAc,GAAG,IAAIR,IAAI,CAACC,YAAT,CAAsBH,MAAtB,EAA8B;AAAEI,IAAAA,KAAK,EAAE;AAAT,GAA9B,CAAvB;AACA,QAAMO,QAAQ,GAAGF,WAAW,GACxBC,cAAc,CAACJ,MAAf,CAAsB,CAACE,UAAU,GAAGV,MAAd,IAAwBU,UAA9C,CADwB,GAExB,IAFJ;AAIA,QAAMI,KAAK,GAAGf,WAAW,CAAC;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,YAAV;AAAwBC,IAAAA;AAAxB,GAAD,CAAzB;AACA,QAAMa,SAAS,GAAGJ,WAAW,GACzBZ,WAAW,CAAC;AAAEC,IAAAA,MAAM,EAAEU,UAAV;AAAsBT,IAAAA,YAAtB;AAAoCC,IAAAA;AAApC,GAAD,CADc,GAEzB,IAFJ;AAIA,SAAO;AAAEY,IAAAA,KAAF;AAASC,IAAAA,SAAT;AAAoBF,IAAAA;AAApB,GAAP;AACD;AAED,eAAe,SAASG,QAAT,CACbC,IADa,EAMb;AACA,QAAM;AAAEjB,IAAAA,MAAF;AAAUU,IAAAA,UAAV;AAAsBT,IAAAA;AAAtB,MAAuCgB,IAAvC,aAAuCA,IAAvC,cAAuCA,IAAvC,GAA+C,EAArD;AACA,QAAM;AAAEf,IAAAA;AAAF,MAAaJ,WAAW,EAA9B;AACA,QAAMoB,KAAK,GAAGrB,OAAO,CAAC,MAAM;AAC1B,QAAI,OAAOG,MAAP,KAAkB,QAAlB,IAA8B,CAACC,YAAnC,EAAiD,OAAO,EAAP;AAEjD,WAAOS,UAAU,GACbD,kBAAkB,CAAC;AAAET,MAAAA,MAAF;AAAUU,MAAAA,UAAV;AAAsBT,MAAAA,YAAtB;AAAoCC,MAAAA;AAApC,KAAD,CADL,GAEbH,WAAW,CAAC;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,YAAV;AAAwBC,MAAAA;AAAxB,KAAD,CAFf;AAGD,GANoB,EAMlB,CAACF,MAAD,EAASU,UAAT,EAAqBT,YAArB,CANkB,CAArB;AAQA,SAAO,OAAOiB,KAAP,KAAiB,QAAjB,GAA4B;AAAEJ,IAAAA,KAAK,EAAEI;AAAT,GAA5B,GAA+CA,KAAtD;AACD","sourcesContent":["import { useMemo } from 'react'\nimport { useCommerce } from '..'\n\nexport function formatPrice({\n  amount,\n  currencyCode,\n  locale,\n}: {\n  amount: number\n  currencyCode: string\n  locale: string\n}) {\n  const formatCurrency = new Intl.NumberFormat(locale, {\n    style: 'currency',\n    currency: currencyCode,\n  })\n\n  return formatCurrency.format(amount)\n}\n\nexport function formatVariantPrice({\n  amount,\n  baseAmount,\n  currencyCode,\n  locale,\n}: {\n  baseAmount: number\n  amount: number\n  currencyCode: string\n  locale: string\n}) {\n  const hasDiscount = baseAmount > amount\n  const formatDiscount = new Intl.NumberFormat(locale, { style: 'percent' })\n  const discount = hasDiscount\n    ? formatDiscount.format((baseAmount - amount) / baseAmount)\n    : null\n\n  const price = formatPrice({ amount, currencyCode, locale })\n  const basePrice = hasDiscount\n    ? formatPrice({ amount: baseAmount, currencyCode, locale })\n    : null\n\n  return { price, basePrice, discount }\n}\n\nexport default function usePrice(\n  data?: {\n    amount: number\n    baseAmount?: number\n    currencyCode: string\n  } | null\n) {\n  const { amount, baseAmount, currencyCode } = data ?? {}\n  const { locale } = useCommerce()\n  const value = useMemo(() => {\n    if (typeof amount !== 'number' || !currencyCode) return ''\n\n    return baseAmount\n      ? formatVariantPrice({ amount, baseAmount, currencyCode, locale })\n      : formatPrice({ amount, currencyCode, locale })\n  }, [amount, baseAmount, currencyCode])\n\n  return typeof value === 'string' ? { price: value } : value\n}\n"]},"metadata":{},"sourceType":"module"}