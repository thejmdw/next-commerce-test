{"ast":null,"code":"import { ValidationError } from '@commerce/utils/errors';\n\nconst getCustomMessage = (code, message) => {\n  switch (code) {\n    case 'UNIDENTIFIED_CUSTOMER':\n      message = 'Cannot find an account that matches the provided credentials';\n      break;\n  }\n\n  return message;\n};\n\nexport const throwUserErrors = errors => {\n  if (errors && errors.length) {\n    throw new ValidationError({\n      errors: errors.map(({\n        code,\n        message\n      }) => ({\n        code: code !== null && code !== void 0 ? code : 'validation_error',\n        message: getCustomMessage(code, message)\n      }))\n    });\n  }\n};\nexport default throwUserErrors;","map":{"version":3,"sources":["/Users/thejmdw/workspace/websites/next-commerce-test/framework/shopify/utils/throw-user-errors.ts"],"names":["ValidationError","getCustomMessage","code","message","throwUserErrors","errors","length","map"],"mappings":"AAAA,SAASA,eAAT,QAAgC,wBAAhC;;AAiBA,MAAMC,gBAAgB,GAAG,CAACC,IAAD,EAAsBC,OAAtB,KAA0C;AACjE,UAAQD,IAAR;AACE,SAAK,uBAAL;AACEC,MAAAA,OAAO,GAAG,8DAAV;AACA;AAHJ;;AAKA,SAAOA,OAAP;AACD,CAPD;;AASA,OAAO,MAAMC,eAAe,GAAIC,MAAD,IAAyB;AACtD,MAAIA,MAAM,IAAIA,MAAM,CAACC,MAArB,EAA6B;AAC3B,UAAM,IAAIN,eAAJ,CAAoB;AACxBK,MAAAA,MAAM,EAAEA,MAAM,CAACE,GAAP,CAAW,CAAC;AAAEL,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAD,MAAwB;AACzCD,QAAAA,IAAI,EAAEA,IAAF,aAAEA,IAAF,cAAEA,IAAF,GAAU,kBAD2B;AAEzCC,QAAAA,OAAO,EAAEF,gBAAgB,CAACC,IAAD,EAAOC,OAAP;AAFgB,OAAxB,CAAX;AADgB,KAApB,CAAN;AAMD;AACF,CATM;AAWP,eAAeC,eAAf","sourcesContent":["import { ValidationError } from '@commerce/utils/errors'\n\nimport {\n  CheckoutErrorCode,\n  CheckoutUserError,\n  CustomerErrorCode,\n  CustomerUserError,\n} from '../schema'\n\nexport type UserErrors = Array<CheckoutUserError | CustomerUserError>\n\nexport type UserErrorCode =\n  | CustomerErrorCode\n  | CheckoutErrorCode\n  | null\n  | undefined\n\nconst getCustomMessage = (code: UserErrorCode, message: string) => {\n  switch (code) {\n    case 'UNIDENTIFIED_CUSTOMER':\n      message = 'Cannot find an account that matches the provided credentials'\n      break\n  }\n  return message\n}\n\nexport const throwUserErrors = (errors?: UserErrors) => {\n  if (errors && errors.length) {\n    throw new ValidationError({\n      errors: errors.map(({ code, message }) => ({\n        code: code ?? 'validation_error',\n        message: getCustomMessage(code, message),\n      })),\n    })\n  }\n}\n\nexport default throwUserErrors\n"]},"metadata":{},"sourceType":"module"}