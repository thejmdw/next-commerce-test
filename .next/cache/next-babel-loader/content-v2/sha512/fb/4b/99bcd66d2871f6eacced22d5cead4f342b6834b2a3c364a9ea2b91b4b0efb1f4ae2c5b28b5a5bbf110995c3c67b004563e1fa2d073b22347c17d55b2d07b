{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useMemo } from 'react';\nimport useCommerceCart from '@commerce/cart/use-cart';\nimport { checkoutCreate, checkoutToCart } from '../utils';\nimport getCheckoutQuery from '../utils/queries/get-checkout-query';\nexport default useCommerceCart;\nexport const handler = {\n  fetchOptions: {\n    query: getCheckoutQuery\n  },\n\n  async fetcher({\n    input: {\n      cartId: checkoutId\n    },\n    options,\n    fetch\n  }) {\n    var _checkout;\n\n    let checkout;\n\n    if (checkoutId) {\n      const data = await fetch(_objectSpread(_objectSpread({}, options), {}, {\n        variables: {\n          checkoutId: checkoutId\n        }\n      }));\n      checkout = data.node;\n    }\n\n    if ((_checkout = checkout) !== null && _checkout !== void 0 && _checkout.completedAt || !checkoutId) {\n      checkout = await checkoutCreate(fetch);\n    }\n\n    return checkoutToCart({\n      checkout\n    });\n  },\n\n  useHook: ({\n    useData\n  }) => input => {\n    const response = useData({\n      swrOptions: _objectSpread({\n        revalidateOnFocus: false\n      }, input === null || input === void 0 ? void 0 : input.swrOptions)\n    });\n    return useMemo(() => Object.create(response, {\n      isEmpty: {\n        get() {\n          var _response$data$lineIt, _response$data;\n\n          return ((_response$data$lineIt = (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.lineItems.length) !== null && _response$data$lineIt !== void 0 ? _response$data$lineIt : 0) <= 0;\n        },\n\n        enumerable: true\n      }\n    }), [response]);\n  }\n};","map":{"version":3,"sources":["/Users/thejmdw/workspace/websites/next-commerce-test/framework/shopify/cart/use-cart.tsx"],"names":["useMemo","useCommerceCart","checkoutCreate","checkoutToCart","getCheckoutQuery","handler","fetchOptions","query","fetcher","input","cartId","checkoutId","options","fetch","checkout","data","variables","node","completedAt","useHook","useData","response","swrOptions","revalidateOnFocus","Object","create","isEmpty","get","lineItems","length","enumerable"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,OAAOC,eAAP,MAGO,yBAHP;AAOA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,UAA/C;AACA,OAAOC,gBAAP,MAA6B,qCAA7B;AAEA,eAAeH,eAAf;AAEA,OAAO,MAAMI,OAKZ,GAAG;AACFC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAEH;AADK,GADZ;;AAIF,QAAMI,OAAN,CAAc;AAAEC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAEC;AAAV,KAAT;AAAiCC,IAAAA,OAAjC;AAA0CC,IAAAA;AAA1C,GAAd,EAAiE;AAAA;;AAC/D,QAAIC,QAAJ;;AAEA,QAAIH,UAAJ,EAAgB;AACd,YAAMI,IAAI,GAAG,MAAMF,KAAK,iCACnBD,OADmB;AAEtBI,QAAAA,SAAS,EAAE;AACTL,UAAAA,UAAU,EAAEA;AADH;AAFW,SAAxB;AAMAG,MAAAA,QAAQ,GAAGC,IAAI,CAACE,IAAhB;AACD;;AAED,QAAI,aAAAH,QAAQ,UAAR,sCAAUI,WAAV,IAAyB,CAACP,UAA9B,EAA0C;AACxCG,MAAAA,QAAQ,GAAG,MAAMZ,cAAc,CAACW,KAAD,CAA/B;AACD;;AAED,WAAOV,cAAc,CAAC;AAAEW,MAAAA;AAAF,KAAD,CAArB;AACD,GAtBC;;AAuBFK,EAAAA,OAAO,EAAE,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAkBX,KAAD,IAAW;AACnC,UAAMY,QAAQ,GAAGD,OAAO,CAAC;AACvBE,MAAAA,UAAU;AAAIC,QAAAA,iBAAiB,EAAE;AAAvB,SAAiCd,KAAjC,aAAiCA,KAAjC,uBAAiCA,KAAK,CAAEa,UAAxC;AADa,KAAD,CAAxB;AAGA,WAAOtB,OAAO,CACZ,MACEwB,MAAM,CAACC,MAAP,CAAcJ,QAAd,EAAwB;AACtBK,MAAAA,OAAO,EAAE;AACPC,QAAAA,GAAG,GAAG;AAAA;;AACJ,iBAAO,4CAACN,QAAQ,CAACN,IAAV,mDAAC,eAAea,SAAf,CAAyBC,MAA1B,yEAAoC,CAApC,KAA0C,CAAjD;AACD,SAHM;;AAIPC,QAAAA,UAAU,EAAE;AAJL;AADa,KAAxB,CAFU,EAUZ,CAACT,QAAD,CAVY,CAAd;AAYD;AAvCC,CALG","sourcesContent":["import { useMemo } from 'react'\nimport useCommerceCart, {\n  FetchCartInput,\n  UseCart,\n} from '@commerce/cart/use-cart'\n\nimport { Cart } from '../types'\nimport { SWRHook } from '@commerce/utils/types'\nimport { checkoutCreate, checkoutToCart } from '../utils'\nimport getCheckoutQuery from '../utils/queries/get-checkout-query'\n\nexport default useCommerceCart as UseCart<typeof handler>\n\nexport const handler: SWRHook<\n  Cart | null,\n  {},\n  FetchCartInput,\n  { isEmpty?: boolean }\n> = {\n  fetchOptions: {\n    query: getCheckoutQuery,\n  },\n  async fetcher({ input: { cartId: checkoutId }, options, fetch }) {\n    let checkout\n\n    if (checkoutId) {\n      const data = await fetch({\n        ...options,\n        variables: {\n          checkoutId: checkoutId,\n        },\n      })\n      checkout = data.node\n    }\n\n    if (checkout?.completedAt || !checkoutId) {\n      checkout = await checkoutCreate(fetch)\n    }\n\n    return checkoutToCart({ checkout })\n  },\n  useHook: ({ useData }) => (input) => {\n    const response = useData({\n      swrOptions: { revalidateOnFocus: false, ...input?.swrOptions },\n    })\n    return useMemo(\n      () =>\n        Object.create(response, {\n          isEmpty: {\n            get() {\n              return (response.data?.lineItems.length ?? 0) <= 0\n            },\n            enumerable: true,\n          },\n        }),\n      [response]\n    )\n  },\n}\n"]},"metadata":{},"sourceType":"module"}