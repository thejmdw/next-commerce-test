{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { getConfig } from '../api';\nimport { getAllPagesQuery } from '../utils/queries';\n\nconst getAllPages = async (options) => {\n  var _data$pages, _data$pages$edges;\n\n  let {\n    config,\n    variables = {\n      first: 250\n    }\n  } = options !== null && options !== void 0 ? options : {};\n  config = getConfig(config);\n  const {\n    locale\n  } = config;\n  const {\n    data\n  } = await config.fetch(getAllPagesQuery, {\n    variables\n  });\n  const pages = (_data$pages = data.pages) === null || _data$pages === void 0 ? void 0 : (_data$pages$edges = _data$pages.edges) === null || _data$pages$edges === void 0 ? void 0 : _data$pages$edges.map((_ref) => {\n    let {\n      node: {\n        title: name,\n        handle\n      }\n    } = _ref,\n        node = _objectWithoutProperties(_ref.node, [\"title\", \"handle\"]);\n\n    return _objectSpread(_objectSpread({}, node), {}, {\n      url: `/${locale}/${handle}`,\n      name\n    });\n  });\n  return {\n    pages\n  };\n};\n\nexport default getAllPages;","map":{"version":3,"sources":["/Users/thejmdw/workspace/websites/next-commerce-test/framework/shopify/common/get-all-pages.ts"],"names":["getConfig","getAllPagesQuery","getAllPages","options","config","variables","first","locale","data","fetch","pages","edges","map","node","title","name","handle","url"],"mappings":";;;;;;;;;;AAAA,SAASA,SAAT,QAAyC,QAAzC;AAEA,SAASC,gBAAT,QAAiC,kBAAjC;;AAkBA,MAAMC,WAAW,GAAG,OAAOC,OAAP,KAIO;AAAA;;AACzB,MAAI;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,SAAS,GAAG;AAAEC,MAAAA,KAAK,EAAE;AAAT;AAAtB,MAAyCH,OAAzC,aAAyCA,OAAzC,cAAyCA,OAAzC,GAAoD,EAAxD;AACAC,EAAAA,MAAM,GAAGJ,SAAS,CAACI,MAAD,CAAlB;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAaH,MAAnB;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAW,MAAMJ,MAAM,CAACK,KAAP,CAAaR,gBAAb,EAA+B;AAAEI,IAAAA;AAAF,GAA/B,CAAvB;AAEA,QAAMK,KAAK,kBAAGF,IAAI,CAACE,KAAR,qEAAG,YAAYC,KAAf,sDAAG,kBAAmBC,GAAnB,CACZ;AAAA,QAAC;AAAEC,MAAAA,IAAI,EAAE;AAAEC,QAAAA,KAAK,EAAEC,IAAT;AAAeC,QAAAA;AAAf;AAAR,KAAD;AAAA,QAAmCH,IAAnC,iCAAGA,IAAH;;AAAA,2CACKA,IADL;AAEEI,MAAAA,GAAG,EAAG,IAAGV,MAAO,IAAGS,MAAO,EAF5B;AAGED,MAAAA;AAHF;AAAA,GADY,CAAd;AAQA,SAAO;AAAEL,IAAAA;AAAF,GAAP;AACD,CAnBD;;AAqBA,eAAeR,WAAf","sourcesContent":["import { getConfig, ShopifyConfig } from '../api'\nimport { PageEdge } from '../schema'\nimport { getAllPagesQuery } from '../utils/queries'\n\ntype Variables = {\n  first?: number\n}\n\ntype ReturnType = {\n  pages: Page[]\n}\n\nexport type Page = {\n  id: string\n  name: string\n  url: string\n  sort_order?: number\n  body: string\n}\n\nconst getAllPages = async (options?: {\n  variables?: Variables\n  config: ShopifyConfig\n  preview?: boolean\n}): Promise<ReturnType> => {\n  let { config, variables = { first: 250 } } = options ?? {}\n  config = getConfig(config)\n  const { locale } = config\n  const { data } = await config.fetch(getAllPagesQuery, { variables })\n\n  const pages = data.pages?.edges?.map(\n    ({ node: { title: name, handle, ...node } }: PageEdge) => ({\n      ...node,\n      url: `/${locale}/${handle}`,\n      name,\n    })\n  )\n\n  return { pages }\n}\n\nexport default getAllPages\n"]},"metadata":{},"sourceType":"module"}