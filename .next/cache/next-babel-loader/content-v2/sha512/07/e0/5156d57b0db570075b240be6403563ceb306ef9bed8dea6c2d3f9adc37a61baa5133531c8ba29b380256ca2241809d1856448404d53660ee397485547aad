{"ast":null,"code":"import _regeneratorRuntime from \"/Users/thejmdw/workspace/websites/next-commerce-test/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/thejmdw/workspace/websites/next-commerce-test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { setCustomerToken } from './customer-token';\nimport { customerAccessTokenCreateMutation } from './mutations';\nimport throwUserErrors from './throw-user-errors';\n\nvar handleLogin = function handleLogin(data) {\n  var response = data.customerAccessTokenCreate;\n  throwUserErrors(response === null || response === void 0 ? void 0 : response.customerUserErrors);\n  var customerAccessToken = response === null || response === void 0 ? void 0 : response.customerAccessToken;\n  var accessToken = customerAccessToken === null || customerAccessToken === void 0 ? void 0 : customerAccessToken.accessToken;\n\n  if (accessToken) {\n    setCustomerToken(accessToken);\n  }\n\n  return customerAccessToken;\n};\n\nexport var handleAutomaticLogin = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fetch, input) {\n    var loginData;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return fetch({\n              query: customerAccessTokenCreateMutation,\n              variables: {\n                input: input\n              }\n            });\n\n          case 3:\n            loginData = _context.sent;\n            handleLogin(loginData);\n            _context.next = 9;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 7]]);\n  }));\n\n  return function handleAutomaticLogin(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport default handleLogin;","map":{"version":3,"sources":["/Users/thejmdw/workspace/websites/next-commerce-test/framework/shopify/utils/handle-login.ts"],"names":["setCustomerToken","customerAccessTokenCreateMutation","throwUserErrors","handleLogin","data","response","customerAccessTokenCreate","customerUserErrors","customerAccessToken","accessToken","handleAutomaticLogin","fetch","input","query","variables","loginData"],"mappings":";;AAEA,SAASA,gBAAT,QAAiC,kBAAjC;AACA,SAASC,iCAAT,QAAkD,aAAlD;AACA,OAAOC,eAAP,MAA4B,qBAA5B;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAe;AACjC,MAAMC,QAAQ,GAAGD,IAAI,CAACE,yBAAtB;AACAJ,EAAAA,eAAe,CAACG,QAAD,aAACA,QAAD,uBAACA,QAAQ,CAAEE,kBAAX,CAAf;AAEA,MAAMC,mBAAmB,GAAGH,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEG,mBAAtC;AACA,MAAMC,WAAW,GAAGD,mBAAH,aAAGA,mBAAH,uBAAGA,mBAAmB,CAAEC,WAAzC;;AAEA,MAAIA,WAAJ,EAAiB;AACfT,IAAAA,gBAAgB,CAACS,WAAD,CAAhB;AACD;;AAED,SAAOD,mBAAP;AACD,CAZD;;AAcA,OAAO,IAAME,oBAAoB;AAAA,sEAAG,iBAClCC,KADkC,EAElCC,KAFkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAKRD,KAAK,CAAC;AAC5BE,cAAAA,KAAK,EAAEZ,iCADqB;AAE5Ba,cAAAA,SAAS,EAAE;AACTF,gBAAAA,KAAK,EAALA;AADS;AAFiB,aAAD,CALG;;AAAA;AAK1BG,YAAAA,SAL0B;AAWhCZ,YAAAA,WAAW,CAACY,SAAD,CAAX;AAXgC;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAApBL,oBAAoB;AAAA;AAAA;AAAA,GAA1B;AAeP,eAAeP,WAAf","sourcesContent":["import { FetcherOptions } from '@commerce/utils/types'\nimport { CustomerAccessTokenCreateInput } from '../schema'\nimport { setCustomerToken } from './customer-token'\nimport { customerAccessTokenCreateMutation } from './mutations'\nimport throwUserErrors from './throw-user-errors'\n\nconst handleLogin = (data: any) => {\n  const response = data.customerAccessTokenCreate\n  throwUserErrors(response?.customerUserErrors)\n\n  const customerAccessToken = response?.customerAccessToken\n  const accessToken = customerAccessToken?.accessToken\n\n  if (accessToken) {\n    setCustomerToken(accessToken)\n  }\n\n  return customerAccessToken\n}\n\nexport const handleAutomaticLogin = async (\n  fetch: <T = any, B = Body>(options: FetcherOptions<B>) => Promise<T>,\n  input: CustomerAccessTokenCreateInput\n) => {\n  try {\n    const loginData = await fetch({\n      query: customerAccessTokenCreateMutation,\n      variables: {\n        input,\n      },\n    })\n    handleLogin(loginData)\n  } catch (error) {}\n}\n\nexport default handleLogin\n"]},"metadata":{},"sourceType":"module"}