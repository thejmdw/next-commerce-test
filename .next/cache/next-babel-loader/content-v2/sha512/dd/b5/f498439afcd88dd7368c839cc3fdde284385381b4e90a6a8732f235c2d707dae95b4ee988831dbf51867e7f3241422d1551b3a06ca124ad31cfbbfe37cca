{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useCallback } from 'react';\nimport { CommerceError } from '@commerce/utils/errors';\nimport useAddItem from '@commerce/cart/use-add-item';\nimport useCart from './use-cart';\nimport { checkoutLineItemAddMutation, getCheckoutId, checkoutToCart } from '../utils';\nexport default useAddItem;\nexport const handler = {\n  fetchOptions: {\n    query: checkoutLineItemAddMutation\n  },\n\n  async fetcher({\n    input: item,\n    options,\n    fetch\n  }) {\n    var _item$quantity;\n\n    if (item.quantity && (!Number.isInteger(item.quantity) || item.quantity < 1)) {\n      throw new CommerceError({\n        message: 'The item quantity has to be a valid integer greater than 0'\n      });\n    }\n\n    const {\n      checkoutLineItemsAdd\n    } = await fetch(_objectSpread(_objectSpread({}, options), {}, {\n      variables: {\n        checkoutId: getCheckoutId(),\n        lineItems: [{\n          variantId: item.variantId,\n          quantity: (_item$quantity = item.quantity) !== null && _item$quantity !== void 0 ? _item$quantity : 1\n        }]\n      }\n    }));\n    return checkoutToCart(checkoutLineItemsAdd);\n  },\n\n  useHook: ({\n    fetch\n  }) => () => {\n    const {\n      mutate\n    } = useCart();\n    return useCallback(async function addItem(input) {\n      const data = await fetch({\n        input\n      });\n      await mutate(data, false);\n      return data;\n    }, [fetch, mutate]);\n  }\n};","map":{"version":3,"sources":["/Users/thejmdw/workspace/websites/next-commerce-test/framework/shopify/cart/use-add-item.tsx"],"names":["useCallback","CommerceError","useAddItem","useCart","checkoutLineItemAddMutation","getCheckoutId","checkoutToCart","handler","fetchOptions","query","fetcher","input","item","options","fetch","quantity","Number","isInteger","message","checkoutLineItemsAdd","variables","checkoutId","lineItems","variantId","useHook","mutate","addItem","data"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AAEA,SAASC,aAAT,QAA8B,wBAA9B;AACA,OAAOC,UAAP,MAAuC,6BAAvC;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SACEC,2BADF,EAEEC,aAFF,EAGEC,cAHF,QAIO,UAJP;AAQA,eAAeJ,UAAf;AAEA,OAAO,MAAMK,OAA6C,GAAG;AAC3DC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAEL;AADK,GAD6C;;AAI3D,QAAMM,OAAN,CAAc;AAAEC,IAAAA,KAAK,EAAEC,IAAT;AAAeC,IAAAA,OAAf;AAAwBC,IAAAA;AAAxB,GAAd,EAA+C;AAAA;;AAC7C,QACEF,IAAI,CAACG,QAAL,KACC,CAACC,MAAM,CAACC,SAAP,CAAiBL,IAAI,CAACG,QAAtB,CAAD,IAAoCH,IAAI,CAACG,QAAL,GAAiB,CADtD,CADF,EAGE;AACA,YAAM,IAAId,aAAJ,CAAkB;AACtBiB,QAAAA,OAAO,EAAE;AADa,OAAlB,CAAN;AAGD;;AAED,UAAM;AAAEC,MAAAA;AAAF,QAA2B,MAAML,KAAK,iCAIvCD,OAJuC;AAK1CO,MAAAA,SAAS,EAAE;AACTC,QAAAA,UAAU,EAAEhB,aAAa,EADhB;AAETiB,QAAAA,SAAS,EAAE,CACT;AACEC,UAAAA,SAAS,EAAEX,IAAI,CAACW,SADlB;AAEER,UAAAA,QAAQ,oBAAEH,IAAI,CAACG,QAAP,2DAAmB;AAF7B,SADS;AAFF;AAL+B,OAA5C;AAgBA,WAAOT,cAAc,CAACa,oBAAD,CAArB;AACD,GA/B0D;;AAgC3DK,EAAAA,OAAO,EAAE,CAAC;AAAEV,IAAAA;AAAF,GAAD,KAAe,MAAM;AAC5B,UAAM;AAAEW,MAAAA;AAAF,QAAatB,OAAO,EAA1B;AAEA,WAAOH,WAAW,CAChB,eAAe0B,OAAf,CAAuBf,KAAvB,EAA8B;AAC5B,YAAMgB,IAAI,GAAG,MAAMb,KAAK,CAAC;AAAEH,QAAAA;AAAF,OAAD,CAAxB;AACA,YAAMc,MAAM,CAACE,IAAD,EAAO,KAAP,CAAZ;AACA,aAAOA,IAAP;AACD,KALe,EAMhB,CAACb,KAAD,EAAQW,MAAR,CANgB,CAAlB;AAQD;AA3C0D,CAAtD","sourcesContent":["import { useCallback } from 'react'\nimport type { MutationHook } from '@commerce/utils/types'\nimport { CommerceError } from '@commerce/utils/errors'\nimport useAddItem, { UseAddItem } from '@commerce/cart/use-add-item'\nimport useCart from './use-cart'\nimport {\n  checkoutLineItemAddMutation,\n  getCheckoutId,\n  checkoutToCart,\n} from '../utils'\nimport { Cart, CartItemBody } from '../types'\nimport { Mutation, MutationCheckoutLineItemsAddArgs } from '../schema'\n\nexport default useAddItem as UseAddItem<typeof handler>\n\nexport const handler: MutationHook<Cart, {}, CartItemBody> = {\n  fetchOptions: {\n    query: checkoutLineItemAddMutation,\n  },\n  async fetcher({ input: item, options, fetch }) {\n    if (\n      item.quantity &&\n      (!Number.isInteger(item.quantity) || item.quantity! < 1)\n    ) {\n      throw new CommerceError({\n        message: 'The item quantity has to be a valid integer greater than 0',\n      })\n    }\n\n    const { checkoutLineItemsAdd } = await fetch<\n      Mutation,\n      MutationCheckoutLineItemsAddArgs\n    >({\n      ...options,\n      variables: {\n        checkoutId: getCheckoutId(),\n        lineItems: [\n          {\n            variantId: item.variantId,\n            quantity: item.quantity ?? 1,\n          },\n        ],\n      },\n    })\n\n    return checkoutToCart(checkoutLineItemsAdd)\n  },\n  useHook: ({ fetch }) => () => {\n    const { mutate } = useCart()\n\n    return useCallback(\n      async function addItem(input) {\n        const data = await fetch({ input })\n        await mutate(data, false)\n        return data\n      },\n      [fetch, mutate]\n    )\n  },\n}\n"]},"metadata":{},"sourceType":"module"}