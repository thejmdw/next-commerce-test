{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport useCustomer from '@commerce/customer/use-customer';\nimport { getCustomerQuery, getCustomerToken } from '../utils';\nexport default useCustomer;\nexport const handler = {\n  fetchOptions: {\n    query: getCustomerQuery\n  },\n\n  async fetcher({\n    options,\n    fetch\n  }) {\n    var _data$customer;\n\n    const data = await fetch(_objectSpread(_objectSpread({}, options), {}, {\n      variables: {\n        customerAccessToken: getCustomerToken()\n      }\n    }));\n    return (_data$customer = data.customer) !== null && _data$customer !== void 0 ? _data$customer : null;\n  },\n\n  useHook: ({\n    useData\n  }) => input => {\n    return useData({\n      swrOptions: _objectSpread({\n        revalidateOnFocus: false\n      }, input === null || input === void 0 ? void 0 : input.swrOptions)\n    });\n  }\n};","map":{"version":3,"sources":["/Users/thejmdw/workspace/websites/next-commerce-test/framework/shopify/customer/use-customer.tsx"],"names":["useCustomer","getCustomerQuery","getCustomerToken","handler","fetchOptions","query","fetcher","options","fetch","data","variables","customerAccessToken","customer","useHook","useData","input","swrOptions","revalidateOnFocus"],"mappings":";;;;;;AAAA,OAAOA,WAAP,MAAyC,iCAAzC;AAGA,SAASC,gBAAT,EAA2BC,gBAA3B,QAAmD,UAAnD;AAEA,eAAeF,WAAf;AAEA,OAAO,MAAMG,OAAiC,GAAG;AAC/CC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAEJ;AADK,GADiC;;AAI/C,QAAMK,OAAN,CAAc;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAd,EAAkC;AAAA;;AAChC,UAAMC,IAAI,GAAG,MAAMD,KAAK,iCACnBD,OADmB;AAEtBG,MAAAA,SAAS,EAAE;AAAEC,QAAAA,mBAAmB,EAAET,gBAAgB;AAAvC;AAFW,OAAxB;AAIA,6BAAOO,IAAI,CAACG,QAAZ,2DAAwB,IAAxB;AACD,GAV8C;;AAW/CC,EAAAA,OAAO,EAAE,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAkBC,KAAD,IAAW;AACnC,WAAOD,OAAO,CAAC;AACbE,MAAAA,UAAU;AACRC,QAAAA,iBAAiB,EAAE;AADX,SAELF,KAFK,aAELA,KAFK,uBAELA,KAAK,CAAEC,UAFF;AADG,KAAD,CAAd;AAMD;AAlB8C,CAA1C","sourcesContent":["import useCustomer, { UseCustomer } from '@commerce/customer/use-customer'\nimport { Customer } from '@commerce/types'\nimport { SWRHook } from '@commerce/utils/types'\nimport { getCustomerQuery, getCustomerToken } from '../utils'\n\nexport default useCustomer as UseCustomer<typeof handler>\n\nexport const handler: SWRHook<Customer | null> = {\n  fetchOptions: {\n    query: getCustomerQuery,\n  },\n  async fetcher({ options, fetch }) {\n    const data = await fetch<any | null>({\n      ...options,\n      variables: { customerAccessToken: getCustomerToken() },\n    })\n    return data.customer ?? null\n  },\n  useHook: ({ useData }) => (input) => {\n    return useData({\n      swrOptions: {\n        revalidateOnFocus: false,\n        ...input?.swrOptions,\n      },\n    })\n  },\n}\n"]},"metadata":{},"sourceType":"module"}