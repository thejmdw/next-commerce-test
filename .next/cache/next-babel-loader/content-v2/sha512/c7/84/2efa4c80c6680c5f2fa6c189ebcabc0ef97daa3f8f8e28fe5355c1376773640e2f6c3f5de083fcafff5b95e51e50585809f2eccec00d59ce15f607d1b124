{"ast":null,"code":"import _regeneratorRuntime from \"/Users/thejmdw/workspace/websites/next-commerce-test/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/Users/thejmdw/workspace/websites/next-commerce-test/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/Users/thejmdw/workspace/websites/next-commerce-test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useCallback } from 'react';\nimport { CommerceError } from '@commerce/utils/errors';\nimport useAddItem from '@commerce/cart/use-add-item';\nimport useCart from './use-cart';\nimport { checkoutLineItemAddMutation, getCheckoutId, checkoutToCart } from '../utils';\nexport default useAddItem;\nexport var handler = {\n  fetchOptions: {\n    query: checkoutLineItemAddMutation\n  },\n  fetcher: function fetcher(_ref) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _item$quantity;\n\n      var item, options, fetch, _yield$fetch, checkoutLineItemsAdd;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              item = _ref.input, options = _ref.options, fetch = _ref.fetch;\n\n              if (!(item.quantity && (!Number.isInteger(item.quantity) || item.quantity < 1))) {\n                _context.next = 3;\n                break;\n              }\n\n              throw new CommerceError({\n                message: 'The item quantity has to be a valid integer greater than 0'\n              });\n\n            case 3:\n              _context.next = 5;\n              return fetch(_objectSpread(_objectSpread({}, options), {}, {\n                variables: {\n                  checkoutId: getCheckoutId(),\n                  lineItems: [{\n                    variantId: item.variantId,\n                    quantity: (_item$quantity = item.quantity) !== null && _item$quantity !== void 0 ? _item$quantity : 1\n                  }]\n                }\n              }));\n\n            case 5:\n              _yield$fetch = _context.sent;\n              checkoutLineItemsAdd = _yield$fetch.checkoutLineItemsAdd;\n              return _context.abrupt(\"return\", checkoutToCart(checkoutLineItemsAdd));\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  useHook: function useHook(_ref2) {\n    var _s = $RefreshSig$();\n\n    var fetch = _ref2.fetch;\n    return _s(function () {\n      _s();\n\n      var _useCart = useCart(),\n          mutate = _useCart.mutate;\n\n      return useCallback( /*#__PURE__*/function () {\n        var _addItem = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(input) {\n          var data;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return fetch({\n                    input: input\n                  });\n\n                case 2:\n                  data = _context2.sent;\n                  _context2.next = 5;\n                  return mutate(data, false);\n\n                case 5:\n                  return _context2.abrupt(\"return\", data);\n\n                case 6:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        function addItem(_x) {\n          return _addItem.apply(this, arguments);\n        }\n\n        return addItem;\n      }(), [fetch, mutate]);\n    }, \"ZEdD7D/1wfvJEBfCpEyxj7ympJY=\", false, function () {\n      return [useCart];\n    });\n  }\n};","map":{"version":3,"sources":["/Users/thejmdw/workspace/websites/next-commerce-test/framework/shopify/cart/use-add-item.tsx"],"names":["useCallback","CommerceError","useAddItem","useCart","checkoutLineItemAddMutation","getCheckoutId","checkoutToCart","handler","fetchOptions","query","fetcher","item","input","options","fetch","quantity","Number","isInteger","message","variables","checkoutId","lineItems","variantId","checkoutLineItemsAdd","useHook","mutate","data","addItem"],"mappings":";;;;;;;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AAEA,SAASC,aAAT,QAA8B,wBAA9B;AACA,OAAOC,UAAP,MAAuC,6BAAvC;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SACEC,2BADF,EAEEC,aAFF,EAGEC,cAHF,QAIO,UAJP;AAQA,eAAeJ,UAAf;AAEA,OAAO,IAAMK,OAA6C,GAAG;AAC3DC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAEL;AADK,GAD6C;AAIrDM,EAAAA,OAJqD,yBAIZ;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAxBC,cAAAA,IAAwB,QAA/BC,KAA+B,EAAlBC,OAAkB,QAAlBA,OAAkB,EAATC,KAAS,QAATA,KAAS;;AAAA,oBAE3CH,IAAI,CAACI,QAAL,KACC,CAACC,MAAM,CAACC,SAAP,CAAiBN,IAAI,CAACI,QAAtB,CAAD,IAAoCJ,IAAI,CAACI,QAAL,GAAiB,CADtD,CAF2C;AAAA;AAAA;AAAA;;AAAA,oBAKrC,IAAId,aAAJ,CAAkB;AACtBiB,gBAAAA,OAAO,EAAE;AADa,eAAlB,CALqC;;AAAA;AAAA;AAAA,qBAUNJ,KAAK,iCAIvCD,OAJuC;AAK1CM,gBAAAA,SAAS,EAAE;AACTC,kBAAAA,UAAU,EAAEf,aAAa,EADhB;AAETgB,kBAAAA,SAAS,EAAE,CACT;AACEC,oBAAAA,SAAS,EAAEX,IAAI,CAACW,SADlB;AAEEP,oBAAAA,QAAQ,oBAAEJ,IAAI,CAACI,QAAP,2DAAmB;AAF7B,mBADS;AAFF;AAL+B,iBAVC;;AAAA;AAAA;AAUrCQ,cAAAA,oBAVqC,gBAUrCA,oBAVqC;AAAA,+CA0BtCjB,cAAc,CAACiB,oBAAD,CA1BwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2B9C,GA/B0D;AAgC3DC,EAAAA,OAAO,EAAE;AAAA;;AAAA,QAAGV,KAAH,SAAGA,KAAH;AAAA,cAAe,YAAM;AAAA;;AAAA,qBACTX,OAAO,EADE;AAAA,UACpBsB,MADoB,YACpBA,MADoB;;AAG5B,aAAOzB,WAAW;AAAA,gFAChB,kBAAuBY,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACqBE,KAAK,CAAC;AAAEF,oBAAAA,KAAK,EAALA;AAAF,mBAAD,CAD1B;;AAAA;AACQc,kBAAAA,IADR;AAAA;AAAA,yBAEQD,MAAM,CAACC,IAAD,EAAO,KAAP,CAFd;;AAAA;AAAA,oDAGSA,IAHT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADgB;;AAAA,iBACDC,OADC;AAAA;AAAA;;AAAA,eACDA,OADC;AAAA,WAMhB,CAACb,KAAD,EAAQW,MAAR,CANgB,CAAlB;AAQD,KAXQ;AAAA,cACYtB,OADZ;AAAA;AAAA;AAhCkD,CAAtD","sourcesContent":["import { useCallback } from 'react'\nimport type { MutationHook } from '@commerce/utils/types'\nimport { CommerceError } from '@commerce/utils/errors'\nimport useAddItem, { UseAddItem } from '@commerce/cart/use-add-item'\nimport useCart from './use-cart'\nimport {\n  checkoutLineItemAddMutation,\n  getCheckoutId,\n  checkoutToCart,\n} from '../utils'\nimport { Cart, CartItemBody } from '../types'\nimport { Mutation, MutationCheckoutLineItemsAddArgs } from '../schema'\n\nexport default useAddItem as UseAddItem<typeof handler>\n\nexport const handler: MutationHook<Cart, {}, CartItemBody> = {\n  fetchOptions: {\n    query: checkoutLineItemAddMutation,\n  },\n  async fetcher({ input: item, options, fetch }) {\n    if (\n      item.quantity &&\n      (!Number.isInteger(item.quantity) || item.quantity! < 1)\n    ) {\n      throw new CommerceError({\n        message: 'The item quantity has to be a valid integer greater than 0',\n      })\n    }\n\n    const { checkoutLineItemsAdd } = await fetch<\n      Mutation,\n      MutationCheckoutLineItemsAddArgs\n    >({\n      ...options,\n      variables: {\n        checkoutId: getCheckoutId(),\n        lineItems: [\n          {\n            variantId: item.variantId,\n            quantity: item.quantity ?? 1,\n          },\n        ],\n      },\n    })\n\n    return checkoutToCart(checkoutLineItemsAdd)\n  },\n  useHook: ({ fetch }) => () => {\n    const { mutate } = useCart()\n\n    return useCallback(\n      async function addItem(input) {\n        const data = await fetch({ input })\n        await mutate(data, false)\n        return data\n      },\n      [fetch, mutate]\n    )\n  },\n}\n"]},"metadata":{},"sourceType":"module"}