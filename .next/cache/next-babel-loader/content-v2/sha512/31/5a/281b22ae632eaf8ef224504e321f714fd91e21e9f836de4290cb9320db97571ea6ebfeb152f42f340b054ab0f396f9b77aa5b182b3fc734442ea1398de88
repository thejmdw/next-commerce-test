{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fetch from './fetch';\nimport { API_URL, API_TOKEN } from '../../const';\nimport { getError } from '../../utils/handle-fetch-response';\n\nconst fetchGraphqlApi = async (query, {\n  variables\n} = {}, fetchOptions) => {\n  const res = await fetch(API_URL, _objectSpread(_objectSpread({}, fetchOptions), {}, {\n    method: 'POST',\n    headers: _objectSpread(_objectSpread({\n      'X-Shopify-Storefront-Access-Token': API_TOKEN\n    }, fetchOptions === null || fetchOptions === void 0 ? void 0 : fetchOptions.headers), {}, {\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify({\n      query,\n      variables\n    })\n  }));\n  const {\n    data,\n    errors,\n    status\n  } = await res.json();\n\n  if (errors) {\n    throw getError(errors, status);\n  }\n\n  return {\n    data,\n    res\n  };\n};\n\nexport default fetchGraphqlApi;","map":{"version":3,"sources":["/Users/thejmdw/workspace/websites/next-commerce-test/framework/shopify/api/utils/fetch-graphql-api.ts"],"names":["fetch","API_URL","API_TOKEN","getError","fetchGraphqlApi","query","variables","fetchOptions","res","method","headers","body","JSON","stringify","data","errors","status","json"],"mappings":";;;;;;AACA,OAAOA,KAAP,MAAkB,SAAlB;AAEA,SAASC,OAAT,EAAkBC,SAAlB,QAAmC,aAAnC;AACA,SAASC,QAAT,QAAyB,mCAAzB;;AAEA,MAAMC,eAA+B,GAAG,OACtCC,KADsC,EAEtC;AAAEC,EAAAA;AAAF,IAAgB,EAFsB,EAGtCC,YAHsC,KAInC;AACH,QAAMC,GAAG,GAAG,MAAMR,KAAK,CAACC,OAAD,kCAClBM,YADkB;AAErBE,IAAAA,MAAM,EAAE,MAFa;AAGrBC,IAAAA,OAAO;AACL,2CAAqCR;AADhC,OAEFK,YAFE,aAEFA,YAFE,uBAEFA,YAAY,CAAEG,OAFZ;AAGL,sBAAgB;AAHX,MAHc;AAQrBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBR,MAAAA,KADmB;AAEnBC,MAAAA;AAFmB,KAAf;AARe,KAAvB;AAcA,QAAM;AAAEQ,IAAAA,IAAF;AAAQC,IAAAA,MAAR;AAAgBC,IAAAA;AAAhB,MAA2B,MAAMR,GAAG,CAACS,IAAJ,EAAvC;;AAEA,MAAIF,MAAJ,EAAY;AACV,UAAMZ,QAAQ,CAACY,MAAD,EAASC,MAAT,CAAd;AACD;;AAED,SAAO;AAAEF,IAAAA,IAAF;AAAQN,IAAAA;AAAR,GAAP;AACD,CA1BD;;AA2BA,eAAeJ,eAAf","sourcesContent":["import type { GraphQLFetcher } from '@commerce/api'\nimport fetch from './fetch'\n\nimport { API_URL, API_TOKEN } from '../../const'\nimport { getError } from '../../utils/handle-fetch-response'\n\nconst fetchGraphqlApi: GraphQLFetcher = async (\n  query: string,\n  { variables } = {},\n  fetchOptions\n) => {\n  const res = await fetch(API_URL, {\n    ...fetchOptions,\n    method: 'POST',\n    headers: {\n      'X-Shopify-Storefront-Access-Token': API_TOKEN!,\n      ...fetchOptions?.headers,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      query,\n      variables,\n    }),\n  })\n\n  const { data, errors, status } = await res.json()\n\n  if (errors) {\n    throw getError(errors, status)\n  }\n\n  return { data, res }\n}\nexport default fetchGraphqlApi\n"]},"metadata":{},"sourceType":"module"}