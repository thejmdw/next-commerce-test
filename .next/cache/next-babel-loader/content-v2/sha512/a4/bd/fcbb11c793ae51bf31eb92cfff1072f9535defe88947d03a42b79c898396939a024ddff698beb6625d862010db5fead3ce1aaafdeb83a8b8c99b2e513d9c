{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Cookies from 'js-cookie';\nimport { useHook, useSWRHook } from '../utils/use-hook';\nimport { useCommerce } from '..';\nexport const fetcher = async ({\n  options,\n  input: {\n    cartId\n  },\n  fetch\n}) => {\n  return cartId ? await fetch(_objectSpread({}, options)) : null;\n};\n\nconst fn = provider => {\n  var _provider$cart;\n\n  return (_provider$cart = provider.cart) === null || _provider$cart === void 0 ? void 0 : _provider$cart.useCart;\n};\n\nconst useCart = input => {\n  var _hook$fetcher;\n\n  const hook = useHook(fn);\n  const {\n    cartCookie\n  } = useCommerce();\n  const fetcherFn = (_hook$fetcher = hook.fetcher) !== null && _hook$fetcher !== void 0 ? _hook$fetcher : fetcher;\n\n  const wrapper = context => {\n    context.input.cartId = Cookies.get(cartCookie);\n    return fetcherFn(context);\n  };\n\n  return useSWRHook(_objectSpread(_objectSpread({}, hook), {}, {\n    fetcher: wrapper\n  }))(input);\n};\n\nexport default useCart;","map":{"version":3,"sources":["/Users/thejmdw/workspace/websites/next-commerce-test/framework/commerce/cart/use-cart.tsx"],"names":["Cookies","useHook","useSWRHook","useCommerce","fetcher","options","input","cartId","fetch","fn","provider","cart","useCart","hook","cartCookie","fetcherFn","wrapper","context","get"],"mappings":";;;;;;AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,mBAApC;AAGA,SAAmBC,WAAnB,QAAsC,IAAtC;AAeA,OAAO,MAAMC,OAAmD,GAAG,OAAO;AACxEC,EAAAA,OADwE;AAExEC,EAAAA,KAAK,EAAE;AAAEC,IAAAA;AAAF,GAFiE;AAGxEC,EAAAA;AAHwE,CAAP,KAI7D;AACJ,SAAOD,MAAM,GAAG,MAAMC,KAAK,mBAAMH,OAAN,EAAd,GAAiC,IAA9C;AACD,CANM;;AAQP,MAAMI,EAAE,GAAIC,QAAD;AAAA;;AAAA,2BAAwBA,QAAQ,CAACC,IAAjC,mDAAwB,eAAeC,OAAvC;AAAA,CAAX;;AAEA,MAAMA,OAAgB,GAAIN,KAAD,IAAW;AAAA;;AAClC,QAAMO,IAAI,GAAGZ,OAAO,CAACQ,EAAD,CAApB;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAiBX,WAAW,EAAlC;AACA,QAAMY,SAAS,oBAAGF,IAAI,CAACT,OAAR,yDAAmBA,OAAlC;;AACA,QAAMY,OAAuB,GAAIC,OAAD,IAAa;AAC3CA,IAAAA,OAAO,CAACX,KAAR,CAAcC,MAAd,GAAuBP,OAAO,CAACkB,GAAR,CAAYJ,UAAZ,CAAvB;AACA,WAAOC,SAAS,CAACE,OAAD,CAAhB;AACD,GAHD;;AAIA,SAAOf,UAAU,iCAAMW,IAAN;AAAYT,IAAAA,OAAO,EAAEY;AAArB,KAAV,CAA0CV,KAA1C,CAAP;AACD,CATD;;AAWA,eAAeM,OAAf","sourcesContent":["import Cookies from 'js-cookie'\nimport { useHook, useSWRHook } from '../utils/use-hook'\nimport type { HookFetcherFn, SWRHook } from '../utils/types'\nimport type { Cart } from '../types'\nimport { Provider, useCommerce } from '..'\n\nexport type FetchCartInput = {\n  cartId?: Cart['id']\n}\n\nexport type UseCart<\n  H extends SWRHook<any, any, any> = SWRHook<\n    Cart | null,\n    {},\n    FetchCartInput,\n    { isEmpty?: boolean }\n  >\n> = ReturnType<H['useHook']>\n\nexport const fetcher: HookFetcherFn<Cart | null, FetchCartInput> = async ({\n  options,\n  input: { cartId },\n  fetch,\n}) => {\n  return cartId ? await fetch({ ...options }) : null\n}\n\nconst fn = (provider: Provider) => provider.cart?.useCart!\n\nconst useCart: UseCart = (input) => {\n  const hook = useHook(fn)\n  const { cartCookie } = useCommerce()\n  const fetcherFn = hook.fetcher ?? fetcher\n  const wrapper: typeof fetcher = (context) => {\n    context.input.cartId = Cookies.get(cartCookie)\n    return fetcherFn(context)\n  }\n  return useSWRHook({ ...hook, fetcher: wrapper })(input)\n}\n\nexport default useCart\n"]},"metadata":{},"sourceType":"module"}